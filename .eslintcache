[{"D:\\FolioX-Frontend\\src\\index.js":"1","D:\\FolioX-Frontend\\src\\App.js":"2","D:\\FolioX-Frontend\\src\\store\\index.js":"3","D:\\FolioX-Frontend\\src\\routes.js":"4","D:\\FolioX-Frontend\\src\\components\\LoadingSpinner\\LoadingSpinner.js":"5","D:\\FolioX-Frontend\\src\\components\\Modal\\ModalRoot.js":"6","D:\\FolioX-Frontend\\src\\components\\Notification\\Notification.js":"7","D:\\FolioX-Frontend\\src\\pages\\Admin\\AdminOption\\AdminOption.js":"8","D:\\FolioX-Frontend\\src\\pages\\GetStarted\\GetStarted.js":"9","D:\\FolioX-Frontend\\src\\pages\\Landing\\Landing.js":"10","D:\\FolioX-Frontend\\src\\pages\\Admin\\AdminRegister\\RegistrationOverlay.js":"11","D:\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\DashboardLayout.js":"12","D:\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\Home.js":"13","D:\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\AddGroup.js":"14","D:\\FolioX-Frontend\\src\\pages\\Admin\\AdminRegister\\AdminRegister.js":"15","D:\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\Group.js":"16","D:\\FolioX-Frontend\\src\\pages\\Admin\\AdminLogin\\AdminLogin.js":"17","D:\\FolioX-Frontend\\src\\components\\Modal\\AddStudentModal.js":"18","D:\\FolioX-Frontend\\src\\store\\notification\\index.js":"19","D:\\FolioX-Frontend\\src\\store\\auth\\index.js":"20","D:\\FolioX-Frontend\\src\\store\\isLoading\\index.js":"21","D:\\FolioX-Frontend\\src\\store\\modal\\index.js":"22","D:\\FolioX-Frontend\\src\\store\\college\\index.js":"23","D:\\FolioX-Frontend\\src\\store\\group\\index.js":"24","D:\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\NavBar\\index.js":"25","D:\\FolioX-Frontend\\src\\components\\Navbar\\Navbar.js":"26","D:\\FolioX-Frontend\\src\\components\\Card\\Card.js":"27","D:\\FolioX-Frontend\\src\\components\\CustomButton\\CustomButton.js":"28","D:\\FolioX-Frontend\\src\\components\\CustomTypography\\Typography.js":"29","D:\\FolioX-Frontend\\src\\components\\CustomInput\\CustomInput.js":"30","D:\\FolioX-Frontend\\src\\components\\Select\\Select.js":"31","D:\\FolioX-Frontend\\src\\assets\\style\\pages\\AdminRegister\\RegistrationOverlay.js":"32","D:\\FolioX-Frontend\\src\\assets\\style\\pages\\AdminRegister\\AdminRegister.js":"33","D:\\FolioX-Frontend\\src\\components\\Modal\\index.js":"34","D:\\FolioX-Frontend\\src\\store\\message\\index.js":"35","D:\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\NavBar\\NavItem.js":"36","D:\\FolioX-Frontend\\src\\components\\BreadCumb\\BreadCrumb.js":"37","D:\\FolioX-Frontend\\src\\components\\Footer\\Footer.js":"38","D:\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\Courses.js":"39"},{"size":590,"mtime":1620742982071,"results":"40","hashOfConfig":"41"},{"size":922,"mtime":1620742982022,"results":"42","hashOfConfig":"41"},{"size":1125,"mtime":1620742982103,"results":"43","hashOfConfig":"41"},{"size":1677,"mtime":1620841122637,"results":"44","hashOfConfig":"41"},{"size":336,"mtime":1620742982071,"results":"45","hashOfConfig":"41"},{"size":497,"mtime":1620742982071,"results":"46","hashOfConfig":"41"},{"size":1678,"mtime":1620742982071,"results":"47","hashOfConfig":"41"},{"size":1884,"mtime":1620742982087,"results":"48","hashOfConfig":"41"},{"size":1875,"mtime":1620742982087,"results":"49","hashOfConfig":"41"},{"size":2687,"mtime":1620742982087,"results":"50","hashOfConfig":"41"},{"size":1515,"mtime":1620742982087,"results":"51","hashOfConfig":"41"},{"size":1571,"mtime":1620754458406,"results":"52","hashOfConfig":"41"},{"size":163,"mtime":1620742982087,"results":"53","hashOfConfig":"41"},{"size":5374,"mtime":1620756561002,"results":"54","hashOfConfig":"41"},{"size":8520,"mtime":1620742982087,"results":"55","hashOfConfig":"41"},{"size":13577,"mtime":1620758154180,"results":"56","hashOfConfig":"41"},{"size":4940,"mtime":1620742982087,"results":"57","hashOfConfig":"41"},{"size":2551,"mtime":1620742982071,"results":"58","hashOfConfig":"41"},{"size":1265,"mtime":1620742982103,"results":"59","hashOfConfig":"41"},{"size":1781,"mtime":1620742982087,"results":"60","hashOfConfig":"41"},{"size":259,"mtime":1620742982103,"results":"61","hashOfConfig":"41"},{"size":877,"mtime":1620742982103,"results":"62","hashOfConfig":"41"},{"size":1680,"mtime":1620742982087,"results":"63","hashOfConfig":"41"},{"size":8497,"mtime":1620742982103,"results":"64","hashOfConfig":"41"},{"size":5497,"mtime":1620840926919,"results":"65","hashOfConfig":"41"},{"size":1858,"mtime":1620742982071,"results":"66","hashOfConfig":"41"},{"size":2020,"mtime":1620742982071,"results":"67","hashOfConfig":"41"},{"size":2024,"mtime":1620756137909,"results":"68","hashOfConfig":"41"},{"size":629,"mtime":1620742982071,"results":"69","hashOfConfig":"41"},{"size":1714,"mtime":1620742982071,"results":"70","hashOfConfig":"41"},{"size":1187,"mtime":1620742982071,"results":"71","hashOfConfig":"41"},{"size":549,"mtime":1620742982056,"results":"72","hashOfConfig":"41"},{"size":670,"mtime":1620742982056,"results":"73","hashOfConfig":"41"},{"size":1189,"mtime":1620742982071,"results":"74","hashOfConfig":"41"},{"size":1841,"mtime":1620742982103,"results":"75","hashOfConfig":"41"},{"size":1679,"mtime":1620742982087,"results":"76","hashOfConfig":"41"},{"size":1659,"mtime":1620842402757,"results":"77","hashOfConfig":"41"},{"size":415,"mtime":1620756750072,"results":"78","hashOfConfig":"41"},{"size":817,"mtime":1620842687555,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"isc8qi",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"82"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"82"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"82"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"82"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\FolioX-Frontend\\src\\index.js",[],["168","169"],"D:\\FolioX-Frontend\\src\\App.js",[],"D:\\FolioX-Frontend\\src\\store\\index.js",[],"D:\\FolioX-Frontend\\src\\routes.js",[],"D:\\FolioX-Frontend\\src\\components\\LoadingSpinner\\LoadingSpinner.js",[],"D:\\FolioX-Frontend\\src\\components\\Modal\\ModalRoot.js",[],"D:\\FolioX-Frontend\\src\\components\\Notification\\Notification.js",[],"D:\\FolioX-Frontend\\src\\pages\\Admin\\AdminOption\\AdminOption.js",[],"D:\\FolioX-Frontend\\src\\pages\\GetStarted\\GetStarted.js",[],"D:\\FolioX-Frontend\\src\\pages\\Landing\\Landing.js",[],"D:\\FolioX-Frontend\\src\\pages\\Admin\\AdminRegister\\RegistrationOverlay.js",[],"D:\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\DashboardLayout.js",["170","171","172","173"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Outlet } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport NavBar from \"./NavBar\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loadGroups } from \"store/group/index\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    display: \"flex\",\r\n    height: \"100%\",\r\n    overflow: \"hidden\",\r\n    width: \"100%\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    flex: \"1 1 auto\",\r\n    overflow: \"hidden\",\r\n    // paddingTop: 64,\r\n    paddingLeft: 300,\r\n  },\r\n  contentContainer: {\r\n    display: \"flex\",\r\n    flex: \"1 1 auto\",\r\n  },\r\n  content: {\r\n    flex: \"1 1 auto\",\r\n    overflow: \"auto\",\r\n    height: \"100vh\",\r\n    overflow: \"hidden\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      padding: 30,\r\n    },\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      padding: 20,\r\n    },\r\n  },\r\n}));\r\n\r\nconst DashboardLayout = (props) => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const admin_id = useSelector((store) => store.auth.user.access_key.admin_id);\r\n\r\n  //Load Groups\r\n  useEffect(() => {\r\n    dispatch(loadGroups(admin_id));\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <NavBar />\r\n      <div className={classes.wrapper}>\r\n        <div className={classes.contentContainer}>\r\n          <div className={classes.content}>\r\n            <Outlet />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardLayout;\r\n","D:\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\Home.js",["174","175"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nexport default function Home() {\r\n\r\n  return (\r\n    <div>\r\n      <h1>Home Page</h1>\r\n    </div>\r\n  );\r\n}\r\n","D:\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\AddGroup.js",["176","177"],"import React, { useState } from \"react\";\r\nimport Input from \"components/CustomInput/CustomInput\";\r\nimport Button from \"components/CustomButton/CustomButton\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport dropzoneLogo from \"assets/logo/drop-zone-icon.png\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { notificationError } from \"store/notification\";\r\nimport { addGroup } from \"store/group\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport BreadCrumb from \"components/BreadCumb/BreadCrumb\";\r\nimport Footer from \"components/Footer/Footer\";\r\nconst Header = ({ addGroupHandler, groupName, setGroupName }) => {\r\n  return (\r\n    <>\r\n      <Grid container alignItems=\"center\">\r\n        <Grid item xs={12} style={{ marginBottom: 30 }}>\r\n          <BreadCrumb\r\n            link1=\"Student Groups\"\r\n            link2=\"+ New\"\r\n            title=\"Create a new group\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={10}>\r\n          <Input\r\n            label=\"Group Name\"\r\n            background=\"blueDark\"\r\n            value={groupName}\r\n            onChange={(e) => setGroupName(e.target.value)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={2} container justify=\"space-around\">\r\n          <Button\r\n            text=\"+ Add Group\"\r\n            background=\"white\"\r\n            border=\"borderBlue\"\r\n            onClick={addGroupHandler}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst DropZone = ({ acceptedFiles, getRootProps, getInputProps }) => {\r\n  const files = acceptedFiles.map((file) => (\r\n    <div\r\n      style={{\r\n        border: \"1px solid rgba(0,0,0,0.3)\",\r\n        padding: 20,\r\n        marginTop: 20,\r\n        marginBottom: 20,\r\n        backgroundColor: \"rgba(0,0,0,0.1)\",\r\n        borderRadius: \"10px\",\r\n      }}\r\n      key={file.path}\r\n    >\r\n      {file.path} - {file.size} bytes\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <section className=\"container\">\r\n      <div\r\n        {...getRootProps({ className: \"dropzone\" })}\r\n        style={{\r\n          outline: \"none\",\r\n          border:\r\n            acceptedFiles.length <= 0 ? \"1px solid #000\" : \"1px solid #394AAB\",\r\n          height: \"50vh\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          borderRadius: \"10px\",\r\n        }}\r\n      >\r\n        <input {...getInputProps()} />\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <img src={dropzoneLogo} width={80} />\r\n          <p style={{ textAlign: \"center\" }}>\r\n            Upload list of students with .csv extension in the format <br />\r\n            (name, roll_no, email, mobile_no)\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <aside>{files}</aside>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst OtherGroups = () => {\r\n  const groups = useSelector((store) => store.group.groups);\r\n  return (\r\n    <Grid>\r\n      <Typography>Your other groups</Typography>\r\n      {groups.map((group) => {\r\n        return (\r\n          <Button\r\n            key={group.id}\r\n            text={group.group_name}\r\n            background=\"backgroundBlueLight\"\r\n            color=\"white\"\r\n            to={`../id=${group.id}`}\r\n          />\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default function AddGroup() {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const { acceptedFiles, getRootProps, getInputProps } = useDropzone({\r\n    maxFiles: 1,\r\n    accept: \".csv\",\r\n  });\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const admin_id = useSelector((store) => store.auth.user.access_key.admin_id);\r\n  const college_id = useSelector((store) => store.auth.user.college.id);\r\n\r\n  const addGroupHandler = () => {\r\n    if (acceptedFiles.length !== 1) {\r\n      dispatch(notificationError(\"Please Select File\"));\r\n      return;\r\n    }\r\n    if (groupName.trim() === \"\") {\r\n      dispatch(notificationError(\"Enter valid Group Name\"));\r\n      return;\r\n    }\r\n\r\n    const fd = new FormData();\r\n    fd.append(\"admin_id\", admin_id);\r\n    fd.append(\"college_id\", college_id);\r\n    fd.append(\"group_name\", groupName);\r\n    fd.append(\"student_list\", acceptedFiles[0]);\r\n    dispatch(addGroup(fd))\r\n      .then((group) =>\r\n        navigate(`/admin/dashboard/group/id=${group.id}`, { replace: true })\r\n      )\r\n      .catch();\r\n  };\r\n  return (\r\n    <Grid\r\n      style={{\r\n        paddingRight: 200,\r\n        position: \"relative\",\r\n        height: \"calc(100vh - 30px)\",\r\n      }}\r\n    >\r\n      <Grid>\r\n        <Header\r\n          addGroupHandler={addGroupHandler}\r\n          setGroupName={setGroupName}\r\n          groupName={groupName}\r\n        />\r\n      </Grid>\r\n      <Grid\r\n        style={{\r\n          margin: \"20px 0px\",\r\n          marginBottom: \"35px\",\r\n        }}\r\n      >\r\n        <DropZone\r\n          acceptedFiles={acceptedFiles}\r\n          getRootProps={getRootProps}\r\n          getInputProps={getInputProps}\r\n        />\r\n      </Grid>\r\n      <OtherGroups />\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          bottom: \"0px\",\r\n          width: \"100%\",\r\n        }}\r\n      >\r\n        <Footer />\r\n      </div>\r\n    </Grid>\r\n  );\r\n}\r\n","D:\\FolioX-Frontend\\src\\pages\\Admin\\AdminRegister\\AdminRegister.js",["178","179"],"import { Grid } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport Navbar from \"components/Navbar/Navbar\";\r\nimport fx from \"assets/logo/fx.png\";\r\nimport Typography from \"components/CustomTypography/Typography\";\r\nimport useStyles from \"assets/style/pages/AdminRegister/AdminRegister\";\r\nimport CustomInput from \"components/CustomInput/CustomInput\";\r\nimport CustomButton from \"components/CustomButton/CustomButton\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\";\r\nconst circle = <span>&#9675;&nbsp;</span>;\r\n\r\nexport default function Landing(props) {\r\n  //States for all the input field\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [collegeName, setCollegeName] = useState(\"\");\r\n  const [collegeLinkedin, setCollegeLinkedin] = useState(\"\");\r\n  const [collegeAddress, setCollegeAddress] = useState(\"\");\r\n\r\n  /**\r\n   * Function for handling change in input field\r\n   * @param event\r\n   *\r\n   */\r\n\r\n  const handelChange = ({ target: { name: type, value } }) => {\r\n    switch (type) {\r\n      case \"Name\":\r\n        setName(value);\r\n        break;\r\n\r\n      case \"Email\":\r\n        setEmail(value);\r\n        break;\r\n\r\n      case \"MobileNumber\":\r\n        setMobileNumber(value);\r\n        break;\r\n\r\n      case \"Password\":\r\n        setPassword(value);\r\n        break;\r\n\r\n      case \"ConfirmPassword\":\r\n        setConfirmPassword(value);\r\n        break;\r\n\r\n      case \"CollegeName\":\r\n        setCollegeName(value);\r\n        break;\r\n\r\n      case \"CollegeLinkedin\":\r\n        setCollegeLinkedin(value);\r\n        break;\r\n\r\n      case \"CollegeAddress\":\r\n        setCollegeAddress(value);\r\n\r\n      default:\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function to handler Register submit\r\n   * @param event\r\n   */\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    setName((name) => name.trim());\r\n    setEmail((email) => email.trim());\r\n    setMobileNumber((mobileNumber) => mobileNumber.trim());\r\n    setPassword((password) => password.trim());\r\n    setConfirmPassword((confirmPassword) => confirmPassword.trim());\r\n    setCollegeName((collegeName) => collegeName.trim());\r\n    setCollegeLinkedin((collegeLinkedin) => collegeLinkedin.trim());\r\n    setCollegeAddress((collegeAddress) => collegeAddress.trim());\r\n\r\n    //Error notification when password and confirm password didn't match\r\n    // if (password !== confirmPassword) {\r\n    //   setError({ message: \"Password didn't match\" });\r\n\r\n    //   return;\r\n    // }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"name\", name);\r\n    formData.append(\"email\", email);\r\n    formData.append(\"mobile\", mobileNumber);\r\n    formData.append(\"password\", password);\r\n    formData.append(\"college_name\", collegeName);\r\n    formData.append(\"college_linked_in\", collegeLinkedin);\r\n    formData.append(\"college_add\", collegeAddress);\r\n    axios\r\n      .post(\"http://foliox.deepinferx.in/web/api/admin/register\", formData)\r\n      .then((res) => {\r\n        const { success, message } = res.data;\r\n\r\n        //if success = 0 something wrong\r\n        if (success === 0) {\r\n          setTimeout(() => {\r\n            // setError({ message });\r\n          }, 100);\r\n        }\r\n\r\n        //if success = 1 Registeration successfull\r\n        if (success === 1) {\r\n          props.history.push(\"/admin/registration-confirmation-overlay\");\r\n        }\r\n      })\r\n      .catch((e) => {});\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <form onSubmit={submitHandler} className={classes.root}>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        style={{\r\n          height: \"100vh\",\r\n        }}\r\n      >\r\n        <Grid item className={classes.top}></Grid>\r\n        <Grid className={classes.main} item container>\r\n          <Grid item xs={12} style={{ height: \"100px\" }}>\r\n            <Navbar logo={fx} />\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.title}>\r\n            <Typography\r\n              variant=\"h4\"\r\n              align=\"center\"\r\n              component=\"p\"\r\n              fontWeight=\"800\"\r\n            >\r\n              Registration From\r\n            </Typography>\r\n          </Grid>\r\n\r\n          <Grid\r\n            item\r\n            direction=\"row\"\r\n            justify=\"space-around\"\r\n            style={{ flexGrow: \"1\" }}\r\n            container\r\n          >\r\n            <Grid item className={classes.mainLeft} xs={4}>\r\n              <Typography\r\n                variant=\"subtitle1\"\r\n                align=\"center\"\r\n                component=\"p\"\r\n                fontWeight=\"800\"\r\n                gutterBottom\r\n              >\r\n                Personal Details\r\n              </Typography>\r\n\r\n              <CustomInput\r\n                label=\"Name*\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={name}\r\n                name=\"Name\"\r\n                onChange={handelChange}\r\n                autoFocus\r\n                required\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"E-mail*\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={email}\r\n                name=\"Email\"\r\n                onChange={handelChange}\r\n                required\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"Mobile Number*\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={mobileNumber}\r\n                name=\"MobileNumber\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"Password*\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={password}\r\n                type=\"password\"\r\n                name=\"Password\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"Confirm Password*\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={confirmPassword}\r\n                name=\"ConfirmPassword\"\r\n                type=\"password\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Typography\r\n                variant=\"subtitle1\"\r\n                align=\"center\"\r\n                component=\"p\"\r\n                fontWeight=\"800\"\r\n                gutterBottom\r\n              >\r\n                College Details\r\n              </Typography>\r\n              <CustomInput\r\n                background=\"brown\"\r\n                label=\"College Name *\"\r\n                fullWidth\r\n                value={collegeName}\r\n                name=\"CollegeName\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"College LinkedIn Profile\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={collegeLinkedin}\r\n                name=\"CollegeLinkedin\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n              <CustomInput\r\n                background=\"brown\"\r\n                label=\"College Address *\"\r\n                fullWidth\r\n                multiline\r\n                rows=\"5\"\r\n                cols=\"30\"\r\n                value={collegeAddress}\r\n                name=\"CollegeAddress\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n              <CustomButton\r\n                text={\"Login\"}\r\n                logo={circle}\r\n                to={\"/admin/login\"}\r\n                background=\"white\"\r\n                border=\"borderGray\"\r\n              />\r\n              <CustomButton\r\n                type=\"submit\"\r\n                text={\"Register\"}\r\n                background=\"brown\"\r\n              />\r\n            </Grid>\r\n            <Grid item container justify=\"center\" alignItems=\"center\" xs={12}>\r\n              <Typography variant=\"subtitle2\" align=\"center\">\r\n                * The (*) marked fields are required. Read our policy to know\r\n                how we use your data.\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n}\r\n","D:\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\Group.js",["180","181","182","183"],"import {\r\n  Breadcrumbs,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\r\nimport Button from \"components/CustomButton/CustomButton\";\r\nimport ChatBubbleOutlineIcon from \"@material-ui/icons/ChatBubbleOutline\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport { deleteGroup, deleteStudent, updateStudent } from \"store/group/index\";\r\nimport { sendMessageToStudent, sendMessageToGroup } from \"store/message\";\r\nimport Modal from \"components/Modal\";\r\nimport Input from \"components/CustomInput/CustomInput\";\r\nimport { showModal } from \"store/modal\";\r\nimport Footer from \"components/Footer/Footer\";\r\nimport BreadCrump from \"components/BreadCumb/BreadCrumb\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: theme.palette.common.black,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: \"rgba(57, 74, 171, 0.7)\",\r\n      \"& *\": {\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n  tableContainer: {\r\n    border: \"1px solid #000\",\r\n    marginTop: \"20px\",\r\n    maxHeight: \"65vh\",\r\n    \"&::-webkit-scrollbar\": {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  group: {\r\n    marginTop: 50,\r\n  },\r\n});\r\n\r\nconst useMessageStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // width: 350,\r\n    width: \"100%\",\r\n    padding: 15,\r\n    paddingTop: 30,\r\n    paddingBottom: 40,\r\n    backgroundColor: \"e5e5e5\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    boxShadow: theme.shadows[20],\r\n    backgroundColor: \"#e6e8e6\",\r\n  },\r\n  receiver: {\r\n    paddingLeft: 10,\r\n    paddingRight: 10,\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    marginBottom: 15,\r\n    backgroundColor: \"#fff\",\r\n    \"& h3\": {\r\n      color: \"#a1a1a1\",\r\n    },\r\n    \"& p\": {\r\n      color: \"#ECB365\",\r\n      fontWeight: \"bold\",\r\n      paddingLeft: 30,\r\n    },\r\n  },\r\n  message: {\r\n    boxShadow: `${theme.shadows[20]}`,\r\n    border: \"none\",\r\n    outline: \"none\",\r\n    padding: 10,\r\n  },\r\n}));\r\n\r\nconst GroupHeader = (props) => {\r\n  const {\r\n    group_id,\r\n    admin_id,\r\n    college_id,\r\n    groupCreatedAt,\r\n    openMessageModal,\r\n    openDeleteModal,\r\n    group_name,\r\n    dispatch,\r\n  } = props;\r\n  return (\r\n    <Grid container justify=\"space-between\" alignItems=\"center\">\r\n      <Grid item xs=\"12\">\r\n        <BreadCrump\r\n          link1=\"Student Groups\"\r\n          link2={group_name}\r\n          title=\"Group Details\"\r\n        />\r\n      </Grid>\r\n\r\n      <Grid xs item container alignItems=\"center\" justify=\"flex-end\">\r\n        <ChatBubbleOutlineIcon\r\n          onClick={() => openMessageModal()}\r\n          style={{ color: \"rgba(57, 74, 171, 1)\", marginRight: 10 }}\r\n        />\r\n        <AddIcon\r\n          onClick={() =>\r\n            dispatch(\r\n              showModal({\r\n                modalType: \"ADD_STUDENT\",\r\n                modalProps: {\r\n                  admin_id,\r\n                  college_id,\r\n                  group_id,\r\n                },\r\n              })\r\n            )\r\n          }\r\n          style={{ color: \"rgba(57, 74, 171, 1)\", marginRight: 10 }}\r\n        />\r\n        <DeleteOutlineIcon\r\n          onClick={openDeleteModal}\r\n          style={{ color: \"rgba(57, 74, 171, 1)\", marginRight: 10 }}\r\n        />\r\n        <Typography variant=\"caption\">Created On: {groupCreatedAt}</Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst StudentTable = ({\r\n  openDeleteModal,\r\n  openUpdateModal,\r\n  openMessageModal,\r\n  students,\r\n  group_name,\r\n}) => {\r\n  const classes = useStyles();\r\n  students.sort((a, b) => a.name.lenght > b.name.length);\r\n  return (\r\n    <TableContainer component={Paper} className={classes.tableContainer}>\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>{group_name}</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {students.map((student, idx) => (\r\n            <StyledTableRow key={student.id}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {idx + 1}\r\n              </StyledTableCell>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {student.name}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\">{student.roll_no}</StyledTableCell>\r\n              <StyledTableCell align=\"right\">{student.email}</StyledTableCell>\r\n              <StyledTableCell align=\"right\">{student.mobile}</StyledTableCell>\r\n              <StyledTableCell\r\n                align=\"right\"\r\n                onClick={() => openUpdateModal(student)}\r\n              >\r\n                Edit\r\n              </StyledTableCell>\r\n              <StyledTableCell\r\n                align=\"right\"\r\n                onClick={() => openDeleteModal(student)}\r\n              >\r\n                Delete\r\n              </StyledTableCell>\r\n              <StyledTableCell\r\n                align=\"right\"\r\n                onClick={() => openMessageModal(student)}\r\n              >\r\n                Message\r\n              </StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nconst OtherGroups = ({ grop_id, groups }) => {\r\n  const classes = useStyles();\r\n  if (groups.length === 1) return null;\r\n  return (\r\n    <Grid className={classes.group}>\r\n      <Typography>Your other groups</Typography>\r\n      {groups.map((group) => {\r\n        if (group.id === grop_id) return;\r\n        return (\r\n          <Button\r\n            key={group.id}\r\n            text={group.group_name}\r\n            background=\"backgroundBlueLight\"\r\n            color=\"white\"\r\n            to={`../id=${group.id}`}\r\n          />\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst DeleteModal = (props) => {\r\n  const {\r\n    student,\r\n    CloseModal,\r\n    deleteStudentHandler,\r\n    deleteGroupHandler,\r\n    group,\r\n    ...rest\r\n  } = props;\r\n  return (\r\n    <Modal CloseModal={CloseModal} {...rest}>\r\n      <Grid container direction=\"column\">\r\n        <Typography variant=\"h6\" component=\"p\">\r\n          {`Are you sure you want delete ${student.name || group.group_name} ?`}\r\n        </Typography>\r\n        <Grid item container justify=\"center\">\r\n          <Button\r\n            text=\"Delete\"\r\n            onClick={() =>\r\n              student?.name ? deleteStudentHandler() : deleteGroupHandler()\r\n            }\r\n            background=\"backgroundBrownLight\"\r\n          />\r\n          <Button\r\n            text=\"Cancel\"\r\n            onClick={CloseModal}\r\n            background=\"backgroundBlueLight\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst UpdateStudentModal = (props) => {\r\n  const { student, setStudent, CloseModal, updateStudentHandler, ...rest } =\r\n    props;\r\n  return (\r\n    <Modal CloseModal={CloseModal} {...rest}>\r\n      <Grid style={{ maxWidth: 300 }}>\r\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\r\n          Update\r\n        </Typography>\r\n        <Input\r\n          label=\"Name\"\r\n          value={student.name}\r\n          onChange={(e) => setStudent({ ...student, name: e.target.value })}\r\n          background=\"brown\"\r\n        />\r\n        <Input\r\n          label=\"Email\"\r\n          value={student.email}\r\n          onChange={(e) => setStudent({ ...student, email: e.target.value })}\r\n          background=\"brown\"\r\n        />\r\n        <Input\r\n          label=\"Mobile\"\r\n          value={student.mobile}\r\n          background=\"brown\"\r\n          onChange={(e) => setStudent({ ...student, mobile: e.target.value })}\r\n        />\r\n        <Input\r\n          value={student.password}\r\n          label=\"password\"\r\n          background=\"brown\"\r\n          onChange={(e) => setStudent({ ...student, password: e.target.value })}\r\n        />\r\n        <Grid item container justify=\"center\">\r\n          <Button\r\n            text=\"Update\"\r\n            onClick={updateStudentHandler}\r\n            background=\"yellow\"\r\n          />\r\n          <Button\r\n            text=\"Cancel\"\r\n            onClick={CloseModal}\r\n            background=\"backgroundBlueLight\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst MessageModal = ({\r\n  open,\r\n  student,\r\n  CloseModal,\r\n  sendMessage,\r\n  group_name,\r\n}) => {\r\n  const classes = useMessageStyles();\r\n  const [message, setMessage] = useState(\"\");\r\n  return (\r\n    <Modal open={open} CloseModal={CloseModal}>\r\n      <Grid style={{ minWidth: 300 }}>\r\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\r\n          Create Message\r\n        </Typography>\r\n        <div className={classes.receiver}>\r\n          <h3>To</h3>\r\n          <p>{student.name || group_name}</p>\r\n        </div>\r\n        <div>\r\n          <Input\r\n            label=\"Enter your message...\"\r\n            className={classes.message}\r\n            multiline\r\n            background=\"brown\"\r\n            rows=\"10\"\r\n            value={message}\r\n            onChange={(e) => setMessage(e.target.value)}\r\n          />\r\n          <Grid item container justify=\"center\">\r\n            <Button\r\n              text=\"Send\"\r\n              onClick={() => {\r\n                sendMessage(message);\r\n                CloseModal();\r\n              }}\r\n              background=\"yellow\"\r\n            />\r\n            <Button\r\n              text=\"Cancel\"\r\n              onClick={CloseModal}\r\n              background=\"backgroundBlueLight\"\r\n            />\r\n          </Grid>\r\n        </div>\r\n      </Grid>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default function Group(props) {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const { id: group_id } = useParams();\r\n  const currentGroup = useSelector(\r\n    (store) => store.group.groups.filter((group) => group.id === group_id)[0]\r\n  );\r\n  const groupCreatedAt = currentGroup?.time;\r\n  const { students, group_name } = currentGroup || {};\r\n  students?.sort((a, b) => parseInt(a.id, 10) - parseInt(b.id, 10));\r\n  const groups = useSelector((store) => store.group.groups);\r\n  const admin_id = useSelector((store) => store.auth.user.access_key.admin_id);\r\n  const college_id = useSelector((store) => store.auth.user.college.id);\r\n  const [deleteModal, setDeleteModal] = useState(false);\r\n  const [student, setStudent] = useState(\"\");\r\n  const [updateModal, setUpdateModal] = useState(false);\r\n  const [messageModal, setMessageModal] = useState(false);\r\n\r\n  const CloseModal = () => {\r\n    setDeleteModal(false);\r\n    setUpdateModal(false);\r\n    setMessageModal(false);\r\n    setStudent(\"\");\r\n  };\r\n  const openDeleteModal = (student) => {\r\n    if (student) setStudent(student);\r\n    setDeleteModal((open) => !open);\r\n  };\r\n  const deleteStudentHandler = () => {\r\n    dispatch(deleteStudent(student, admin_id));\r\n    CloseModal();\r\n  };\r\n\r\n  const deleteGroupHandler = () => {\r\n    dispatch(deleteGroup(group_id, admin_id));\r\n    CloseModal();\r\n  };\r\n\r\n  const openUpdateModal = (student) => {\r\n    setStudent(student);\r\n    setUpdateModal(true);\r\n  };\r\n\r\n  const updateStudentHandler = () => {\r\n    dispatch(updateStudent(student, admin_id));\r\n    CloseModal();\r\n  };\r\n\r\n  const openMessageModal = (student) => {\r\n    if (student) setStudent(student);\r\n    setMessageModal(true);\r\n  };\r\n\r\n  const sendMessage = (message) => {\r\n    if (student) {\r\n      dispatch(\r\n        sendMessageToStudent({ message, admin_id, stduent_id: student.id })\r\n      );\r\n    } else {\r\n      dispatch(sendMessageToGroup({ message, admin_id, group_id }));\r\n    }\r\n  };\r\n\r\n  if (!currentGroup) {\r\n    navigate(\"/admin/dashboard/home\", { replace: true });\r\n    return <></>;\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      style={{\r\n        position: \"relative\",\r\n        height: \"calc(100vh - 30px)\",\r\n      }}\r\n    >\r\n      <GroupHeader\r\n        openMessageModal={openMessageModal}\r\n        groupCreatedAt={groupCreatedAt}\r\n        openDeleteModal={openDeleteModal}\r\n        group_id={group_id}\r\n        admin_id={admin_id}\r\n        college_id={college_id}\r\n        dispatch={dispatch}\r\n        group_name={group_name}\r\n      />\r\n      <StudentTable\r\n        openDeleteModal={openDeleteModal}\r\n        openUpdateModal={openUpdateModal}\r\n        openMessageModal={openMessageModal}\r\n        students={students}\r\n        group_name={group_name}\r\n      />\r\n      <OtherGroups grop_id={group_id} groups={groups} />\r\n\r\n      <UpdateStudentModal\r\n        open={updateModal}\r\n        student={student}\r\n        setStudent={setStudent}\r\n        CloseModal={CloseModal}\r\n        updateStudentHandler={updateStudentHandler}\r\n      />\r\n      <DeleteModal\r\n        open={deleteModal}\r\n        CloseModal={CloseModal}\r\n        student={student}\r\n        deleteStudentHandler={deleteStudentHandler}\r\n        deleteGroupHandler={deleteGroupHandler}\r\n        group={currentGroup}\r\n      />\r\n\r\n      <MessageModal\r\n        open={messageModal}\r\n        student={student}\r\n        CloseModal={CloseModal}\r\n        sendMessage={sendMessage}\r\n        group_name={group_name}\r\n      />\r\n      <div style={{ position: \"absolute\", bottom: \"0px\", width: \"100%\" }}>\r\n        <Footer />\r\n      </div>\r\n    </Grid>\r\n  );\r\n}\r\n","D:\\FolioX-Frontend\\src\\pages\\Admin\\AdminLogin\\AdminLogin.js",["184"],"import React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n//@material-ui core components\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Typography from \"components/CustomTypography/Typography\";\r\nimport CustomInput from \"components/CustomInput/CustomInput\";\r\nimport CustomButton from \"components/CustomButton/CustomButton\";\r\nimport Navbar from \"components/Navbar/Navbar\";\r\nimport Select from \"components/Select/Select\";\r\n\r\nimport fx from \"assets/logo/fx.png\";\r\nimport image from \"assets/img/admin-login-image.svg\";\r\n\r\n//action creater\r\nimport { login } from \"store/auth\";\r\nimport { loadCollegeList } from \"store/college\";\r\n\r\nconst circle = <span>&#9675;&nbsp;</span>;\r\n\r\n//style\r\nconst useStyle = makeStyles((theme) => ({\r\n  root: {\r\n    minHeight: \"100vh\",\r\n  },\r\n  form: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function AdminLogin(props) {\r\n  console.log(\"Admin Login page rendered\");\r\n  const classes = useStyle();\r\n  const dispatch = useDispatch();\r\n\r\n  const collegeList = useSelector((store) => store.college.list);\r\n\r\n  const [loginCredentials, setLoginCredentials] = useState({\r\n    email: undefined,\r\n    password: undefined,\r\n    college_id: undefined,\r\n  });\r\n\r\n  const setSelectedCollege = (e) => {\r\n    console.log(e.target.value);\r\n    setLoginCredentials({ ...loginCredentials, college_id: e.target.value });\r\n  };\r\n\r\n  //Dispatch action  to fetch list of registered colleges\r\n  useEffect(() => {\r\n    dispatch(loadCollegeList());\r\n  }, []);\r\n\r\n  //Form submit handler\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append(\"college_id\", loginCredentials.college_id);\r\n    formData.append(\"email\", loginCredentials.email);\r\n    formData.append(\"password\", loginCredentials.password);\r\n\r\n    dispatch(login(formData));\r\n  };\r\n\r\n  const user = useSelector((store) => store.auth.user?.auth_token);\r\n\r\n  //If login successfull\r\n  const navigate = useNavigate();\r\n  if (user) {\r\n    navigate(\"../dashboard/home\");\r\n  }\r\n  return (\r\n    <>\r\n      <form onSubmit={submitHandler}>\r\n        <Grid className={classes.root} container direction=\"column\">\r\n          <Grid item style={{ height: \"100px\" }}>\r\n            <Navbar logo={fx} />\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography\r\n              variant=\"h4\"\r\n              align=\"center\"\r\n              component=\"p\"\r\n              fontWeight=\"800\"\r\n            >\r\n              Please enter your credentials\r\n            </Typography>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            justify=\"space-around\"\r\n            alignItems=\"center\"\r\n            className={classes.form}\r\n            direction=\"row\"\r\n          >\r\n            <Grid item xs={10} sm={4}>\r\n              <Select\r\n                background=\"brown\"\r\n                value={loginCredentials.college_id}\r\n                changeHandler={setSelectedCollege}\r\n                required\r\n              >\r\n                <option value=\"\" disabled selected hidden>\r\n                  Select college\r\n                </option>\r\n                {collegeList.map((college) => (\r\n                  <option key={college.id} value={college.id}>\r\n                    {college.college_name}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n              <CustomInput\r\n                label=\"Email\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                required\r\n                value={loginCredentials.email || \"\"}\r\n                onChange={(e) =>\r\n                  setLoginCredentials({\r\n                    ...loginCredentials,\r\n                    email: e.target.value,\r\n                  })\r\n                }\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"Password\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                required\r\n                type=\"password\"\r\n                value={loginCredentials.password || \"\"}\r\n                onChange={(e) =>\r\n                  setLoginCredentials({\r\n                    ...loginCredentials,\r\n                    password: e.target.value,\r\n                  })\r\n                }\r\n              ></CustomInput>\r\n              <CustomButton\r\n                text={\"Forgot?\"}\r\n                logo={circle}\r\n                to={\"/get-started/\"}\r\n                background=\"white\"\r\n                border=\"borderGray\"\r\n              />\r\n              <CustomButton\r\n                type=\"submit\"\r\n                text={\"Continue\"}\r\n                background=\"brown\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <img src={image} width=\"300\" alt=\"admin login\" />\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n","D:\\FolioX-Frontend\\src\\components\\Modal\\AddStudentModal.js",[],"D:\\FolioX-Frontend\\src\\store\\notification\\index.js",[],"D:\\FolioX-Frontend\\src\\store\\auth\\index.js",["185"],"import axios from \"axios\";\r\nimport {notificationError, notificationSuccess} from \"store/notification\";\r\n\r\n//constant\r\nconst LOGIN_REQUEST = \"LOGIN_REQUEST\";\r\nconst LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nconst LOGIN_FAILED = \"LOGIN_FAILED\";\r\n\r\n//action creater\r\n\r\nconst loginRequest = () => {\r\n  return {\r\n    type: LOGIN_REQUEST,\r\n    isLoading: true,\r\n  };\r\n};\r\n\r\nconst loginFailed = () => {\r\n  return {\r\n    type: LOGIN_FAILED,\r\n    isLoading: false,\r\n  };\r\n};\r\n\r\nconst loginSuccess = (user) => {\r\n  return {\r\n    type: LOGIN_SUCCESS,\r\n    payload: user,\r\n    isLoading: false,\r\n  };\r\n};\r\n\r\nconst login = (user) => {\r\n  return async (dispatch) => {\r\n    dispatch(loginRequest());\r\n    try {\r\n      const { data } = await axios.post(\r\n        \"http://foliox.deepinferx.in/web/api/admin/login\",\r\n        user\r\n      );\r\n\r\n      //success\r\n      if (data.success === 1) {\r\n        delete data.success;\r\n        dispatch(loginSuccess(data));\r\n      }\r\n\r\n      //login failed\r\n      else {\r\n        delete data.success;\r\n        throw data;\r\n      }\r\n    } catch (error) {\r\n      dispatch(loginFailed());\r\n      dispatch(notificationError(error.message));\r\n    }\r\n  };\r\n};\r\n\r\nconst register = (newUser) => {};\r\n\r\nconst logout = () => {};\r\n\r\n//Reducer\r\n\r\nconst initialAuthState = {\r\n  user: {},\r\n};\r\n\r\nconst authReducer = (state = initialAuthState, action) => {\r\n  switch (action.type) {\r\n    case LOGIN_REQUEST:\r\n      return {\r\n        ...state,\r\n      };\r\n\r\n    case LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n\r\n    case LOGIN_FAILED:\r\n      return {\r\n        ...state,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { login, loginSuccess, loginRequest, loginFailed, register, logout };\r\n\r\nexport default authReducer;\r\n","D:\\FolioX-Frontend\\src\\store\\isLoading\\index.js",[],"D:\\FolioX-Frontend\\src\\store\\modal\\index.js",[],"D:\\FolioX-Frontend\\src\\store\\college\\index.js",["186","187","188"],"import axios from \"axios\";\r\nimport { notificationClear,notificationError,notificationSuccess } from \"store/notification\";\r\n\r\n//constant\r\nconst COLLEGE_LIST_REQUEST = \"COLLEGE_LIST_REQUEST\";\r\nconst COLLEGE_LIST_SUCCESS = \"COLLEGE_LIST_SUCCESS\";\r\nconst COLLEGE_LIST_FAILED = \"COLLGE_LIST_FAILED\";\r\n\r\n//action creater\r\n\r\nconst collegeListRequested = () => {\r\n  return {\r\n    type: COLLEGE_LIST_REQUEST,\r\n    isLoading: true,\r\n  };\r\n};\r\n\r\nconst collegeListSuccess = (colleges) => {\r\n  return {\r\n    type: COLLEGE_LIST_SUCCESS,\r\n    payload: colleges,\r\n    isLoading: false,\r\n  };\r\n};\r\n\r\nconst collegeListFailed = () => {\r\n  return {\r\n    type: COLLEGE_LIST_FAILED,\r\n    isLoading: false,\r\n  };\r\n};\r\n\r\nconst loadCollegeList = () => {\r\n  return async (dispatch) => {\r\n    dispatch(collegeListRequested());\r\n\r\n    try {\r\n      const { data } = await axios.get(\"/gen/colleges\");\r\n      if (data.success === 0) {\r\n        throw { message: \"Something went wrong.\" };\r\n      }\r\n      dispatch(collegeListSuccess(data.colleges));\r\n    } catch (error) {\r\n      dispatch(notificationError(error.message));\r\n      dispatch(collegeListFailed());\r\n    }\r\n  };\r\n};\r\n\r\n//reducer\r\n\r\nconst initialCollegeState = {\r\n  list: [],\r\n};\r\n\r\nconst collegeReducer = (state = initialCollegeState, action) => {\r\n  switch (action.type) {\r\n    case COLLEGE_LIST_REQUEST:\r\n      return {\r\n        ...state,\r\n      };\r\n\r\n    case COLLEGE_LIST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        list: action.payload,\r\n      };\r\n\r\n    case COLLEGE_LIST_FAILED:\r\n      return {\r\n        ...state,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default collegeReducer;\r\nexport { loadCollegeList };\r\n","D:\\FolioX-Frontend\\src\\store\\group\\index.js",["189","190","191","192"],"import axios from \"axios\";\r\nimport { notificationError,notificationSuccess } from \"store/notification\";\r\n\r\n//constant\r\nconst GROUP_LOAD_REQUEST = \"GROUP_LOAD_REQUEST\";\r\nconst GROUP_LOAD_SUCCESS = \"GROU_LOAD_SUCCESS\";\r\nconst GROUP_LOAD_FAILED = \"GROUP_LOAD_FAILED\";\r\n\r\nconst GROUP_DELETE_REQUEST = \"GROUP_DELETE_REQUEST\";\r\nconst GROUP_DELETE_SUCCESS = \"GROUP_DELETE_SUCCESS\";\r\nconst GROUP_DELETE_FAILED = \"GROUP_DELETE_FAILED\";\r\n\r\nconst DELETE_STUDENT_REQUEST = \"DELETE_STUDENT_REQUEST\";\r\nconst DELETE_STUDENT_SUCCESS = \"DELETE_STUDENT_SUCCESS\";\r\nconst DELETE_STUDENT_FAILED = \"DELETE_STUDENT_FAILED\";\r\n\r\nconst UPDATE_STUDENT_REQUEST = \"UPDATE_STUDENT_REQUEST\";\r\nconst UPDATE_STUDENT_SUCCESS = \"UPDATE_STUDENT_SUCCESS\";\r\nconst UPDATE_STUDENT_FAILED = \"UPDATE_STUDENT_FAILED\";\r\n\r\nconst ADD_STUDENT_REQUEST = \"ADD_STUDENT_REQUEST\"\r\nconst ADD_STUDENT_SUCCESS = \"ADD_STUDENT_SUCCESS\"\r\nconst ADD_STUDENT_FAILED = \"ADD_STUDENT_FAILED\"\r\n\r\nconst ADD_GROUP_REQUEST = 'ADD_GROUP_REQUEST'\r\nconst ADD_GROUP_SUCCESS = 'ADD_GROUP_SUCCESS'\r\nconst ADD_GROUP_FAILED = 'ADD_GROUP_FAILED'\r\n\r\n//action creater\r\n\r\nconst addGroup = (group) => {\r\n  return dispatch => {\r\n    return new Promise((resolve, reject)=>{\r\n      dispatch({type: ADD_GROUP_REQUEST, isLoading: true})\r\n      const add = async () => {\r\n        try{\r\n          const res = await axios.post('/admin/students/groups/add', group)\r\n          if(res.data.success === 0)\r\n            throw res.data\r\n          dispatch({type:ADD_GROUP_SUCCESS, isLoading: false, payload: res.data.group_details})\r\n          dispatch(notificationSuccess(res.data.message))\r\n          resolve(res.data.group_details)\r\n        }catch(error){\r\n          dispatch({type:ADD_GROUP_FAILED, isLoading: false})\r\n          dispatch(notificationError(error.message))\r\n          reject()\r\n        }\r\n      }\r\n      add()\r\n    })\r\n  }\r\n} \r\n\r\n\r\nconst addStudent = (data) => {\r\n\r\n  return  dispatch => {\r\n    return  new Promise((resolve, reject)=>{\r\n      dispatch({type: ADD_STUDENT_REQUEST, isLoading: true})\r\n      fetch = async () => {\r\n        try{\r\n          const fd = new FormData();\r\n          fd.append('admin_id', data.admin_id)\r\n          fd.append('college_id', data.college_id)\r\n          fd.append('group_id', data.group_id)\r\n          fd.append('name', data.name)\r\n          fd.append('email', data.email)\r\n          fd.append('roll_no', data.roll_no)\r\n          fd.append('mobile', data.mobile)\r\n          \r\n          const res = await axios.post('/admin/students/add',fd)\r\n          if(res.data.success === 0)\r\n          throw res.data\r\n          dispatch({type: ADD_STUDENT_SUCCESS, isLoading: false, payload: res.data.student_details})\r\n          resolve({message: res.data.message})\r\n          \r\n        }catch(error){\r\n          dispatch({type: ADD_STUDENT_FAILED, isLoading: false})\r\n          reject({message: error.message})\r\n        }\r\n      }\r\n\r\n      fetch()\r\n\r\n    })\r\n  }\r\n}\r\n\r\nconst loadGroups = (id) => {\r\n  return async (dispatch) => {\r\n    dispatch({type: GROUP_LOAD_REQUEST, isLoading: true,});\r\n    try {\r\n      const res = await axios(\r\n        `http://foliox.deepinferx.in/web/api/admin/students/groups/get?admin=${id}`\r\n      );\r\n      const {\r\n        data: { groups },\r\n      } = res;\r\n      dispatch({ type: GROUP_LOAD_SUCCESS, payload: groups, isLoading: false,});\r\n    } catch (error) {\r\n      dispatch({ type: GROUP_LOAD_FAILED, isLoading: false,});\r\n      dispatch(notificationError(error.message));\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\nconst deleteGroup = (group_id, admin_id) => {\r\n  console.log(group_id, admin_id)\r\n  return async (dispatch) => {\r\n    dispatch({type: GROUP_DELETE_REQUEST, isLoading: true});\r\n\r\n    try {\r\n      const fd = new FormData();\r\n      fd.append('admin', admin_id)\r\n      fd.append('group', group_id)\r\n      const res = await axios.post(\"/admin/students/groups/delete\",\r\n        fd\r\n      );\r\n      if (res.data.success === 0) {\r\n        throw res.data;\r\n      }\r\n      dispatch({type: GROUP_DELETE_SUCCESS, isLoading: false, payload: group_id});\r\n      dispatch(notificationSuccess(res.data.message));\r\n    } catch (error) {\r\n      dispatch({type: GROUP_DELETE_FAILED, isLoading: false});\r\n      dispatch(notificationError(error.message));\r\n    }\r\n  };\r\n};\r\n\r\nconst deleteStudent = (student, admin_id) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: DELETE_STUDENT_REQUEST,\r\n      isLoading: true,\r\n    });\r\n    try {\r\n      const fd = new FormData();\r\n      fd.append('admin_id', admin_id)\r\n      fd.append('student_id', student.id);\r\n      const res = await axios.post(\"/admin/students/delete\", fd);\r\n      if (res.data.success === 0) {\r\n        throw { message: res.data.message };\r\n      }\r\n      dispatch({ type: DELETE_STUDENT_SUCCESS,payload: student, isLoading: false });\r\n      dispatch(notificationSuccess(res.data.message));\r\n    } catch (error) {\r\n      dispatch({\r\n        type: DELETE_STUDENT_FAILED,\r\n        isLoading: false,\r\n      });\r\n      dispatch(notificationError(error.message));\r\n    }\r\n  };\r\n};\r\n\r\nconst updateStudent = (student, admin_id) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: UPDATE_STUDENT_REQUEST,\r\n      isLoading: true,\r\n    });\r\n\r\n    try {\r\n      const fd = new FormData();\r\n      fd.append('admin_id', admin_id);\r\n      fd.append('student_id', student.id);\r\n      fd.append('name', student.name);\r\n      fd.append('email', student.email);\r\n      fd.append('mobile', student.mobile);\r\n      fd.append('pass', student.password);\r\n      \r\n      const res = await axios.post(\"/admin/students/update\", fd, {\r\n        headers: {\r\n          'Content-type':'multipart/form-data'\r\n        }\r\n      });\r\n      if (res.data.success === 0) throw { message: res.data.message };\r\n      dispatch({ type: UPDATE_STUDENT_SUCCESS, payload: student, isLoading: false });\r\n      dispatch(notificationSuccess(res.data.message));\r\n    } catch (error) {\r\n      dispatch({ type: UPDATE_STUDENT_FAILED, isLoading: false });\r\n      dispatch(notificationError(error.message));\r\n    }\r\n  };\r\n};\r\n\r\n//reducer\r\n\r\nconst groupReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case GROUP_LOAD_SUCCESS:\r\n      return {\r\n        ...state,\r\n        groups: action.payload,\r\n      }\r\n\r\n    case DELETE_STUDENT_SUCCESS: \r\n      {\r\n        const deletedStudent = action.payload\r\n        const group_id = deletedStudent.group_id\r\n        const student_id = deletedStudent.id\r\n        const studentGroup = state.groups.filter(group=>group.id === group_id)[0]  \r\n        const remainingGroup = state.groups.filter(group => group.id !== group_id)\r\n        return {\r\n          ...state,\r\n          groups: [...remainingGroup, {\r\n            ...studentGroup,\r\n            students: [...studentGroup.students.filter(student => student.id !== student_id)]\r\n          }]\r\n        };\r\n      }\r\n      \r\n\r\n    case UPDATE_STUDENT_SUCCESS:\r\n      {\r\n        const updatedStudent = action.payload\r\n        const group_id = updatedStudent.group_id\r\n        const student_id = updatedStudent.id\r\n        const studentGroup = state.groups.filter(group=>group.id === group_id)[0]\r\n        const remainingGroup = state.groups.filter(group => group.id !== group_id)\r\n        return {\r\n            ...state,\r\n            groups: [...remainingGroup,{\r\n              ...studentGroup,\r\n              students: [...studentGroup.students.filter(student => student.id !== student_id), {...updatedStudent}]\r\n            }]\r\n          }\r\n      } \r\n\r\n\r\n    case GROUP_DELETE_SUCCESS: \r\n    {\r\n      const group_id = action.payload\r\n      return {\r\n        ...state,\r\n        groups: [...state.groups.filter(group => group.id != group_id)]\r\n      }\r\n    }\r\n      \r\n    case ADD_STUDENT_SUCCESS:\r\n    {\r\n      const newStudent = action.payload\r\n      const group_id = newStudent.group_id\r\n      const remainingGroup = state.groups.filter(group=>group.id !== group_id)\r\n      const newStudentGroup = state.groups.filter(group => group.id === group_id)[0]\r\n      return {\r\n        ...state,\r\n        groups: [...remainingGroup, {\r\n          ...newStudentGroup,\r\n          students: [...newStudentGroup.students, newStudent]\r\n        }]\r\n      }\r\n    }\r\n\r\n    case ADD_GROUP_SUCCESS: \r\n    {\r\n      const group = action.payload\r\n      return {\r\n        ...state,\r\n        groups: [...state.group, group]\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//export\r\n\r\nexport default groupReducer;\r\nexport { loadGroups, deleteGroup, deleteStudent, updateStudent, addStudent, addGroup };\r\n","D:\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\NavBar\\index.js",["193","194","195","196","197"],"D:\\FolioX-Frontend\\src\\components\\Navbar\\Navbar.js",[],"D:\\FolioX-Frontend\\src\\components\\Card\\Card.js",[],"D:\\FolioX-Frontend\\src\\components\\CustomButton\\CustomButton.js",[],"D:\\FolioX-Frontend\\src\\components\\CustomTypography\\Typography.js",[],"D:\\FolioX-Frontend\\src\\components\\CustomInput\\CustomInput.js",[],"D:\\FolioX-Frontend\\src\\components\\Select\\Select.js",[],"D:\\FolioX-Frontend\\src\\assets\\style\\pages\\AdminRegister\\RegistrationOverlay.js",[],"D:\\FolioX-Frontend\\src\\assets\\style\\pages\\AdminRegister\\AdminRegister.js",[],"D:\\FolioX-Frontend\\src\\components\\Modal\\index.js",[],"D:\\FolioX-Frontend\\src\\store\\message\\index.js",[],"D:\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\NavBar\\NavItem.js",[],"D:\\FolioX-Frontend\\src\\components\\BreadCumb\\BreadCrumb.js",[],"D:\\FolioX-Frontend\\src\\components\\Footer\\Footer.js",[],"D:\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\Courses.js",[],{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","severity":1,"message":"203","line":1,"column":28,"nodeType":"204","messageId":"205","endLine":1,"endColumn":36},{"ruleId":"202","severity":1,"message":"206","line":1,"column":38,"nodeType":"204","messageId":"205","endLine":1,"endColumn":48},{"ruleId":"207","severity":1,"message":"208","line":30,"column":5,"nodeType":"209","messageId":"210","endLine":30,"endColumn":13},{"ruleId":"211","severity":1,"message":"212","line":48,"column":6,"nodeType":"213","endLine":48,"endColumn":8,"suggestions":"214"},{"ruleId":"202","severity":1,"message":"206","line":1,"column":17,"nodeType":"204","messageId":"205","endLine":1,"endColumn":27},{"ruleId":"202","severity":1,"message":"215","line":1,"column":29,"nodeType":"204","messageId":"205","endLine":1,"endColumn":38},{"ruleId":"202","severity":1,"message":"216","line":11,"column":10,"nodeType":"204","messageId":"205","endLine":11,"endColumn":20},{"ruleId":"217","severity":1,"message":"218","line":87,"column":11,"nodeType":"219","endLine":87,"endColumn":48},{"ruleId":"220","severity":1,"message":"221","line":63,"column":7,"nodeType":"222","messageId":"223","endLine":63,"endColumn":15},{"ruleId":"202","severity":1,"message":"224","line":101,"column":26,"nodeType":"204","messageId":"205","endLine":101,"endColumn":33},{"ruleId":"202","severity":1,"message":"225","line":2,"column":3,"nodeType":"204","messageId":"205","endLine":2,"endColumn":14},{"ruleId":"202","severity":1,"message":"226","line":17,"column":34,"nodeType":"204","messageId":"205","endLine":17,"endColumn":38},{"ruleId":"207","severity":1,"message":"227","line":78,"column":5,"nodeType":"209","messageId":"210","endLine":78,"endColumn":20},{"ruleId":"228","severity":1,"message":"229","line":217,"column":35,"nodeType":"230","messageId":"231","endLine":217,"endColumn":42},{"ruleId":"211","severity":1,"message":"232","line":55,"column":6,"nodeType":"213","endLine":55,"endColumn":8,"suggestions":"233"},{"ruleId":"202","severity":1,"message":"234","line":2,"column":28,"nodeType":"204","messageId":"205","endLine":2,"endColumn":47},{"ruleId":"202","severity":1,"message":"235","line":2,"column":10,"nodeType":"204","messageId":"205","endLine":2,"endColumn":27},{"ruleId":"202","severity":1,"message":"234","line":2,"column":46,"nodeType":"204","messageId":"205","endLine":2,"endColumn":65},{"ruleId":"236","severity":1,"message":"237","line":40,"column":9,"nodeType":"238","messageId":"239","endLine":40,"endColumn":52},{"ruleId":"198","severity":1,"message":"240","line":60,"column":7,"nodeType":"204","messageId":"241","endLine":60,"endColumn":12},{"ruleId":"236","severity":1,"message":"237","line":145,"column":9,"nodeType":"238","messageId":"239","endLine":145,"endColumn":45},{"ruleId":"236","severity":1,"message":"237","line":180,"column":35,"nodeType":"238","messageId":"239","endLine":180,"endColumn":71},{"ruleId":"242","severity":1,"message":"243","line":239,"column":59,"nodeType":"244","messageId":"210","endLine":239,"endColumn":61},{"ruleId":"202","severity":1,"message":"215","line":1,"column":17,"nodeType":"204","messageId":"205","endLine":1,"endColumn":26},{"ruleId":"202","severity":1,"message":"206","line":1,"column":28,"nodeType":"204","messageId":"205","endLine":1,"endColumn":38},{"ruleId":"202","severity":1,"message":"245","line":2,"column":30,"nodeType":"204","messageId":"205","endLine":2,"endColumn":38},{"ruleId":"202","severity":1,"message":"246","line":2,"column":40,"nodeType":"204","messageId":"205","endLine":2,"endColumn":51},{"ruleId":"202","severity":1,"message":"247","line":19,"column":11,"nodeType":"204","messageId":"205","endLine":19,"endColumn":19},"no-native-reassign",["248"],"no-negated-in-lhs",["249"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.","no-dupe-keys","Duplicate key 'overflow'.","ObjectExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'admin_id' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["250"],"'useEffect' is defined but never used.","'makeStyles' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'message' is assigned a value but never used.","'Breadcrumbs' is defined but never used.","'Link' is defined but never used.","Duplicate key 'backgroundColor'.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["251"],"'notificationSuccess' is defined but never used.","'notificationClear' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","Read-only global 'fetch' should not be modified.","nativeReassign","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'Navigate' is defined but never used.","'useLocation' is defined but never used.","'UserIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},"Update the dependencies array to be: [admin_id, dispatch]",{"range":"256","text":"257"},"Update the dependencies array to be: [dispatch]",{"range":"258","text":"259"},[1230,1232],"[admin_id, dispatch]",[1607,1609],"[dispatch]"]