[{"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\index.js":"1","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\App.js":"2","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\index.js":"3","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\routes.js":"4","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\LoadingSpinner\\LoadingSpinner.js":"5","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Landing\\Landing.js":"6","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\GetStarted\\GetStarted.js":"7","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\AdminRegister\\AdminRegister.js":"8","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\AdminOption\\AdminOption.js":"9","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\AdminLogin\\AdminLogin.js":"10","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\AdminRegister\\RegistrationOverlay.js":"11","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\Group.js":"12","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\DashboardLayout.js":"13","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\Home.js":"14","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\college\\index.js":"15","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\auth\\index.js":"16","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\group\\index.js":"17","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\isLoading\\index.js":"18","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\NavBar\\index.js":"19","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Navbar\\Navbar.js":"20","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\CustomButton\\CustomButton.js":"21","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Card\\Card.js":"22","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\CustomTypography\\Typography.js":"23","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\CustomInput\\CustomInput.js":"24","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Select\\Select.js":"25","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\assets\\style\\pages\\AdminRegister\\RegistrationOverlay.js":"26","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\assets\\style\\pages\\AdminRegister\\AdminRegister.js":"27","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Modal\\index.js":"28","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\NavBar\\NavItem.js":"29","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\notification\\index.js":"30","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Notification\\Notification.js":"31","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\message\\index.js":"32","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\modal\\index.js":"33","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Modal\\ModalRoot.js":"34","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Modal\\AddStudentModal.js":"35","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\AddGroup.js":"36"},{"size":590,"mtime":1616222029161,"results":"37","hashOfConfig":"38"},{"size":922,"mtime":1616437190860,"results":"39","hashOfConfig":"38"},{"size":1125,"mtime":1616435912414,"results":"40","hashOfConfig":"38"},{"size":1622,"mtime":1616524013097,"results":"41","hashOfConfig":"38"},{"size":336,"mtime":1616222029158,"results":"42","hashOfConfig":"38"},{"size":2687,"mtime":1616671757551,"results":"43","hashOfConfig":"38"},{"size":1875,"mtime":1616672489450,"results":"44","hashOfConfig":"38"},{"size":8520,"mtime":1616222029164,"results":"45","hashOfConfig":"38"},{"size":1884,"mtime":1616672705196,"results":"46","hashOfConfig":"38"},{"size":4940,"mtime":1616222029163,"results":"47","hashOfConfig":"38"},{"size":1515,"mtime":1616222029164,"results":"48","hashOfConfig":"38"},{"size":13112,"mtime":1616669147665,"results":"49","hashOfConfig":"38"},{"size":1570,"mtime":1616614985055,"results":"50","hashOfConfig":"38"},{"size":163,"mtime":1616222029167,"results":"51","hashOfConfig":"38"},{"size":1680,"mtime":1616309368590,"results":"52","hashOfConfig":"38"},{"size":1781,"mtime":1616309318354,"results":"53","hashOfConfig":"38"},{"size":8497,"mtime":1616590927739,"results":"54","hashOfConfig":"38"},{"size":259,"mtime":1616222029172,"results":"55","hashOfConfig":"38"},{"size":5496,"mtime":1616612607455,"results":"56","hashOfConfig":"38"},{"size":1858,"mtime":1616670447147,"results":"57","hashOfConfig":"38"},{"size":2022,"mtime":1616669721752,"results":"58","hashOfConfig":"38"},{"size":2020,"mtime":1616672566674,"results":"59","hashOfConfig":"38"},{"size":629,"mtime":1616222029156,"results":"60","hashOfConfig":"38"},{"size":1714,"mtime":1616584103527,"results":"61","hashOfConfig":"38"},{"size":1187,"mtime":1616222029160,"results":"62","hashOfConfig":"38"},{"size":549,"mtime":1616222029152,"results":"63","hashOfConfig":"38"},{"size":670,"mtime":1616222029152,"results":"64","hashOfConfig":"38"},{"size":1189,"mtime":1616438161281,"results":"65","hashOfConfig":"38"},{"size":1679,"mtime":1616222029166,"results":"66","hashOfConfig":"38"},{"size":1265,"mtime":1616389336368,"results":"67","hashOfConfig":"38"},{"size":1678,"mtime":1616350025250,"results":"68","hashOfConfig":"38"},{"size":1841,"mtime":1616437979912,"results":"69","hashOfConfig":"38"},{"size":877,"mtime":1616435847329,"results":"70","hashOfConfig":"38"},{"size":497,"mtime":1616474323551,"results":"71","hashOfConfig":"38"},{"size":2551,"mtime":1616523357085,"results":"72","hashOfConfig":"38"},{"size":6087,"mtime":1616615039258,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1ntz6rp",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"76"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"76"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"76"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"76"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"76"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"76"},"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\index.js",[],["156","157"],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\App.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\index.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\routes.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\LoadingSpinner\\LoadingSpinner.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Landing\\Landing.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\GetStarted\\GetStarted.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\AdminRegister\\AdminRegister.js",["158","159"],"import { Grid } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport Navbar from \"components/Navbar/Navbar\";\r\nimport fx from \"assets/logo/fx.png\";\r\nimport Typography from \"components/CustomTypography/Typography\";\r\nimport useStyles from \"assets/style/pages/AdminRegister/AdminRegister\";\r\nimport CustomInput from \"components/CustomInput/CustomInput\";\r\nimport CustomButton from \"components/CustomButton/CustomButton\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\";\r\nconst circle = <span>&#9675;&nbsp;</span>;\r\n\r\nexport default function Landing(props) {\r\n  //States for all the input field\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [collegeName, setCollegeName] = useState(\"\");\r\n  const [collegeLinkedin, setCollegeLinkedin] = useState(\"\");\r\n  const [collegeAddress, setCollegeAddress] = useState(\"\");\r\n\r\n  /**\r\n   * Function for handling change in input field\r\n   * @param event\r\n   *\r\n   */\r\n\r\n  const handelChange = ({ target: { name: type, value } }) => {\r\n    switch (type) {\r\n      case \"Name\":\r\n        setName(value);\r\n        break;\r\n\r\n      case \"Email\":\r\n        setEmail(value);\r\n        break;\r\n\r\n      case \"MobileNumber\":\r\n        setMobileNumber(value);\r\n        break;\r\n\r\n      case \"Password\":\r\n        setPassword(value);\r\n        break;\r\n\r\n      case \"ConfirmPassword\":\r\n        setConfirmPassword(value);\r\n        break;\r\n\r\n      case \"CollegeName\":\r\n        setCollegeName(value);\r\n        break;\r\n\r\n      case \"CollegeLinkedin\":\r\n        setCollegeLinkedin(value);\r\n        break;\r\n\r\n      case \"CollegeAddress\":\r\n        setCollegeAddress(value);\r\n\r\n      default:\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function to handler Register submit\r\n   * @param event\r\n   */\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    setName((name) => name.trim());\r\n    setEmail((email) => email.trim());\r\n    setMobileNumber((mobileNumber) => mobileNumber.trim());\r\n    setPassword((password) => password.trim());\r\n    setConfirmPassword((confirmPassword) => confirmPassword.trim());\r\n    setCollegeName((collegeName) => collegeName.trim());\r\n    setCollegeLinkedin((collegeLinkedin) => collegeLinkedin.trim());\r\n    setCollegeAddress((collegeAddress) => collegeAddress.trim());\r\n\r\n    //Error notification when password and confirm password didn't match\r\n    // if (password !== confirmPassword) {\r\n    //   setError({ message: \"Password didn't match\" });\r\n\r\n    //   return;\r\n    // }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"name\", name);\r\n    formData.append(\"email\", email);\r\n    formData.append(\"mobile\", mobileNumber);\r\n    formData.append(\"password\", password);\r\n    formData.append(\"college_name\", collegeName);\r\n    formData.append(\"college_linked_in\", collegeLinkedin);\r\n    formData.append(\"college_add\", collegeAddress);\r\n    axios\r\n      .post(\"http://foliox.deepinferx.in/web/api/admin/register\", formData)\r\n      .then((res) => {\r\n        const { success, message } = res.data;\r\n\r\n        //if success = 0 something wrong\r\n        if (success === 0) {\r\n          setTimeout(() => {\r\n            // setError({ message });\r\n          }, 100);\r\n        }\r\n\r\n        //if success = 1 Registeration successfull\r\n        if (success === 1) {\r\n          props.history.push(\"/admin/registration-confirmation-overlay\");\r\n        }\r\n      })\r\n      .catch((e) => {});\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <form onSubmit={submitHandler} className={classes.root}>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        style={{\r\n          height: \"100vh\",\r\n        }}\r\n      >\r\n        <Grid item className={classes.top}></Grid>\r\n        <Grid className={classes.main} item container>\r\n          <Grid item xs={12} style={{ height: \"100px\" }}>\r\n            <Navbar logo={fx} />\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.title}>\r\n            <Typography\r\n              variant=\"h4\"\r\n              align=\"center\"\r\n              component=\"p\"\r\n              fontWeight=\"800\"\r\n            >\r\n              Registration From\r\n            </Typography>\r\n          </Grid>\r\n\r\n          <Grid\r\n            item\r\n            direction=\"row\"\r\n            justify=\"space-around\"\r\n            style={{ flexGrow: \"1\" }}\r\n            container\r\n          >\r\n            <Grid item className={classes.mainLeft} xs={4}>\r\n              <Typography\r\n                variant=\"subtitle1\"\r\n                align=\"center\"\r\n                component=\"p\"\r\n                fontWeight=\"800\"\r\n                gutterBottom\r\n              >\r\n                Personal Details\r\n              </Typography>\r\n\r\n              <CustomInput\r\n                label=\"Name*\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={name}\r\n                name=\"Name\"\r\n                onChange={handelChange}\r\n                autoFocus\r\n                required\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"E-mail*\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={email}\r\n                name=\"Email\"\r\n                onChange={handelChange}\r\n                required\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"Mobile Number*\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={mobileNumber}\r\n                name=\"MobileNumber\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"Password*\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={password}\r\n                type=\"password\"\r\n                name=\"Password\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"Confirm Password*\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={confirmPassword}\r\n                name=\"ConfirmPassword\"\r\n                type=\"password\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Typography\r\n                variant=\"subtitle1\"\r\n                align=\"center\"\r\n                component=\"p\"\r\n                fontWeight=\"800\"\r\n                gutterBottom\r\n              >\r\n                College Details\r\n              </Typography>\r\n              <CustomInput\r\n                background=\"brown\"\r\n                label=\"College Name *\"\r\n                fullWidth\r\n                value={collegeName}\r\n                name=\"CollegeName\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"College LinkedIn Profile\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={collegeLinkedin}\r\n                name=\"CollegeLinkedin\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n              <CustomInput\r\n                background=\"brown\"\r\n                label=\"College Address *\"\r\n                fullWidth\r\n                multiline\r\n                rows=\"5\"\r\n                cols=\"30\"\r\n                value={collegeAddress}\r\n                name=\"CollegeAddress\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n              <CustomButton\r\n                text={\"Login\"}\r\n                logo={circle}\r\n                to={\"/admin/login\"}\r\n                background=\"white\"\r\n                border=\"borderGray\"\r\n              />\r\n              <CustomButton\r\n                type=\"submit\"\r\n                text={\"Register\"}\r\n                background=\"brown\"\r\n              />\r\n            </Grid>\r\n            <Grid item container justify=\"center\" alignItems=\"center\" xs={12}>\r\n              <Typography variant=\"subtitle2\" align=\"center\">\r\n                * The (*) marked fields are required. Read our policy to know\r\n                how we use your data.\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\AdminOption\\AdminOption.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\AdminLogin\\AdminLogin.js",["160"],"import React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n//@material-ui core components\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Typography from \"components/CustomTypography/Typography\";\r\nimport CustomInput from \"components/CustomInput/CustomInput\";\r\nimport CustomButton from \"components/CustomButton/CustomButton\";\r\nimport Navbar from \"components/Navbar/Navbar\";\r\nimport Select from \"components/Select/Select\";\r\n\r\nimport fx from \"assets/logo/fx.png\";\r\nimport image from \"assets/img/admin-login-image.svg\";\r\n\r\n//action creater\r\nimport { login } from \"store/auth\";\r\nimport { loadCollegeList } from \"store/college\";\r\n\r\nconst circle = <span>&#9675;&nbsp;</span>;\r\n\r\n//style\r\nconst useStyle = makeStyles((theme) => ({\r\n  root: {\r\n    minHeight: \"100vh\",\r\n  },\r\n  form: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function AdminLogin(props) {\r\n  console.log(\"Admin Login page rendered\");\r\n  const classes = useStyle();\r\n  const dispatch = useDispatch();\r\n\r\n  const collegeList = useSelector((store) => store.college.list);\r\n\r\n  const [loginCredentials, setLoginCredentials] = useState({\r\n    email: undefined,\r\n    password: undefined,\r\n    college_id: undefined,\r\n  });\r\n\r\n  const setSelectedCollege = (e) => {\r\n    console.log(e.target.value);\r\n    setLoginCredentials({ ...loginCredentials, college_id: e.target.value });\r\n  };\r\n\r\n  //Dispatch action  to fetch list of registered colleges\r\n  useEffect(() => {\r\n    dispatch(loadCollegeList());\r\n  }, []);\r\n\r\n  //Form submit handler\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append(\"college_id\", loginCredentials.college_id);\r\n    formData.append(\"email\", loginCredentials.email);\r\n    formData.append(\"password\", loginCredentials.password);\r\n\r\n    dispatch(login(formData));\r\n  };\r\n\r\n  const user = useSelector((store) => store.auth.user?.auth_token);\r\n\r\n  //If login successfull\r\n  const navigate = useNavigate();\r\n  if (user) {\r\n    navigate(\"../dashboard/home\");\r\n  }\r\n  return (\r\n    <>\r\n      <form onSubmit={submitHandler}>\r\n        <Grid className={classes.root} container direction=\"column\">\r\n          <Grid item style={{ height: \"100px\" }}>\r\n            <Navbar logo={fx} />\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography\r\n              variant=\"h4\"\r\n              align=\"center\"\r\n              component=\"p\"\r\n              fontWeight=\"800\"\r\n            >\r\n              Please enter your credentials\r\n            </Typography>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            justify=\"space-around\"\r\n            alignItems=\"center\"\r\n            className={classes.form}\r\n            direction=\"row\"\r\n          >\r\n            <Grid item xs={10} sm={4}>\r\n              <Select\r\n                background=\"brown\"\r\n                value={loginCredentials.college_id}\r\n                changeHandler={setSelectedCollege}\r\n                required\r\n              >\r\n                <option value=\"\" disabled selected hidden>\r\n                  Select college\r\n                </option>\r\n                {collegeList.map((college) => (\r\n                  <option key={college.id} value={college.id}>\r\n                    {college.college_name}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n              <CustomInput\r\n                label=\"Email\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                required\r\n                value={loginCredentials.email || \"\"}\r\n                onChange={(e) =>\r\n                  setLoginCredentials({\r\n                    ...loginCredentials,\r\n                    email: e.target.value,\r\n                  })\r\n                }\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"Password\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                required\r\n                type=\"password\"\r\n                value={loginCredentials.password || \"\"}\r\n                onChange={(e) =>\r\n                  setLoginCredentials({\r\n                    ...loginCredentials,\r\n                    password: e.target.value,\r\n                  })\r\n                }\r\n              ></CustomInput>\r\n              <CustomButton\r\n                text={\"Forgot?\"}\r\n                logo={circle}\r\n                to={\"/get-started/\"}\r\n                background=\"white\"\r\n                border=\"borderGray\"\r\n              />\r\n              <CustomButton\r\n                type=\"submit\"\r\n                text={\"Continue\"}\r\n                background=\"brown\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <img src={image} width=\"300\" alt=\"admin login\" />\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\AdminRegister\\RegistrationOverlay.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\Group.js",["161","162","163","164","165"],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\DashboardLayout.js",["166","167","168","169"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Outlet } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport NavBar from \"./NavBar\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loadGroups } from \"store/group/index\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    display: \"flex\",\r\n    height: \"100%\",\r\n    overflow: \"hidden\",\r\n    width: \"100%\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    flex: \"1 1 auto\",\r\n    overflow: \"hidden\",\r\n    // paddingTop: 64,\r\n    paddingLeft: 300,\r\n  },\r\n  contentContainer: {\r\n    display: \"flex\",\r\n    flex: \"1 1 auto\",\r\n  },\r\n  content: {\r\n    flex: \"1 1 auto\",\r\n    overflow: \"auto\",\r\n    height: \"100vh\",\r\n    overflow: \"hidden\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      padding: 50,\r\n    },\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      padding: 20,\r\n    },\r\n  },\r\n}));\r\n\r\nconst DashboardLayout = (props) => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const admin_id = useSelector((store) => store.auth.user.access_key.admin_id);\r\n\r\n  //Load Groups\r\n  useEffect(() => {\r\n    dispatch(loadGroups(admin_id));\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <NavBar/>\r\n      <div className={classes.wrapper}>\r\n        <div className={classes.contentContainer}>\r\n          <div className={classes.content}>\r\n            <Outlet />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardLayout;\r\n","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\Home.js",["170","171"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nexport default function Home() {\r\n\r\n  return (\r\n    <div>\r\n      <h1>Home Page</h1>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\college\\index.js",["172","173","174"],"import axios from \"axios\";\r\nimport { notificationClear,notificationError,notificationSuccess } from \"store/notification\";\r\n\r\n//constant\r\nconst COLLEGE_LIST_REQUEST = \"COLLEGE_LIST_REQUEST\";\r\nconst COLLEGE_LIST_SUCCESS = \"COLLEGE_LIST_SUCCESS\";\r\nconst COLLEGE_LIST_FAILED = \"COLLGE_LIST_FAILED\";\r\n\r\n//action creater\r\n\r\nconst collegeListRequested = () => {\r\n  return {\r\n    type: COLLEGE_LIST_REQUEST,\r\n    isLoading: true,\r\n  };\r\n};\r\n\r\nconst collegeListSuccess = (colleges) => {\r\n  return {\r\n    type: COLLEGE_LIST_SUCCESS,\r\n    payload: colleges,\r\n    isLoading: false,\r\n  };\r\n};\r\n\r\nconst collegeListFailed = () => {\r\n  return {\r\n    type: COLLEGE_LIST_FAILED,\r\n    isLoading: false,\r\n  };\r\n};\r\n\r\nconst loadCollegeList = () => {\r\n  return async (dispatch) => {\r\n    dispatch(collegeListRequested());\r\n\r\n    try {\r\n      const { data } = await axios.get(\"/gen/colleges\");\r\n      if (data.success === 0) {\r\n        throw { message: \"Something went wrong.\" };\r\n      }\r\n      dispatch(collegeListSuccess(data.colleges));\r\n    } catch (error) {\r\n      dispatch(notificationError(error.message));\r\n      dispatch(collegeListFailed());\r\n    }\r\n  };\r\n};\r\n\r\n//reducer\r\n\r\nconst initialCollegeState = {\r\n  list: [],\r\n};\r\n\r\nconst collegeReducer = (state = initialCollegeState, action) => {\r\n  switch (action.type) {\r\n    case COLLEGE_LIST_REQUEST:\r\n      return {\r\n        ...state,\r\n      };\r\n\r\n    case COLLEGE_LIST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        list: action.payload,\r\n      };\r\n\r\n    case COLLEGE_LIST_FAILED:\r\n      return {\r\n        ...state,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default collegeReducer;\r\nexport { loadCollegeList };\r\n","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\auth\\index.js",["175"],"import axios from \"axios\";\r\nimport {notificationError, notificationSuccess} from \"store/notification\";\r\n\r\n//constant\r\nconst LOGIN_REQUEST = \"LOGIN_REQUEST\";\r\nconst LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nconst LOGIN_FAILED = \"LOGIN_FAILED\";\r\n\r\n//action creater\r\n\r\nconst loginRequest = () => {\r\n  return {\r\n    type: LOGIN_REQUEST,\r\n    isLoading: true,\r\n  };\r\n};\r\n\r\nconst loginFailed = () => {\r\n  return {\r\n    type: LOGIN_FAILED,\r\n    isLoading: false,\r\n  };\r\n};\r\n\r\nconst loginSuccess = (user) => {\r\n  return {\r\n    type: LOGIN_SUCCESS,\r\n    payload: user,\r\n    isLoading: false,\r\n  };\r\n};\r\n\r\nconst login = (user) => {\r\n  return async (dispatch) => {\r\n    dispatch(loginRequest());\r\n    try {\r\n      const { data } = await axios.post(\r\n        \"http://foliox.deepinferx.in/web/api/admin/login\",\r\n        user\r\n      );\r\n\r\n      //success\r\n      if (data.success === 1) {\r\n        delete data.success;\r\n        dispatch(loginSuccess(data));\r\n      }\r\n\r\n      //login failed\r\n      else {\r\n        delete data.success;\r\n        throw data;\r\n      }\r\n    } catch (error) {\r\n      dispatch(loginFailed());\r\n      dispatch(notificationError(error.message));\r\n    }\r\n  };\r\n};\r\n\r\nconst register = (newUser) => {};\r\n\r\nconst logout = () => {};\r\n\r\n//Reducer\r\n\r\nconst initialAuthState = {\r\n  user: {},\r\n};\r\n\r\nconst authReducer = (state = initialAuthState, action) => {\r\n  switch (action.type) {\r\n    case LOGIN_REQUEST:\r\n      return {\r\n        ...state,\r\n      };\r\n\r\n    case LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n\r\n    case LOGIN_FAILED:\r\n      return {\r\n        ...state,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { login, loginSuccess, loginRequest, loginFailed, register, logout };\r\n\r\nexport default authReducer;\r\n","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\group\\index.js",["176","177","178","179"],"import axios from \"axios\";\r\nimport { notificationError,notificationSuccess } from \"store/notification\";\r\n\r\n//constant\r\nconst GROUP_LOAD_REQUEST = \"GROUP_LOAD_REQUEST\";\r\nconst GROUP_LOAD_SUCCESS = \"GROU_LOAD_SUCCESS\";\r\nconst GROUP_LOAD_FAILED = \"GROUP_LOAD_FAILED\";\r\n\r\nconst GROUP_DELETE_REQUEST = \"GROUP_DELETE_REQUEST\";\r\nconst GROUP_DELETE_SUCCESS = \"GROUP_DELETE_SUCCESS\";\r\nconst GROUP_DELETE_FAILED = \"GROUP_DELETE_FAILED\";\r\n\r\nconst DELETE_STUDENT_REQUEST = \"DELETE_STUDENT_REQUEST\";\r\nconst DELETE_STUDENT_SUCCESS = \"DELETE_STUDENT_SUCCESS\";\r\nconst DELETE_STUDENT_FAILED = \"DELETE_STUDENT_FAILED\";\r\n\r\nconst UPDATE_STUDENT_REQUEST = \"UPDATE_STUDENT_REQUEST\";\r\nconst UPDATE_STUDENT_SUCCESS = \"UPDATE_STUDENT_SUCCESS\";\r\nconst UPDATE_STUDENT_FAILED = \"UPDATE_STUDENT_FAILED\";\r\n\r\nconst ADD_STUDENT_REQUEST = \"ADD_STUDENT_REQUEST\"\r\nconst ADD_STUDENT_SUCCESS = \"ADD_STUDENT_SUCCESS\"\r\nconst ADD_STUDENT_FAILED = \"ADD_STUDENT_FAILED\"\r\n\r\nconst ADD_GROUP_REQUEST = 'ADD_GROUP_REQUEST'\r\nconst ADD_GROUP_SUCCESS = 'ADD_GROUP_SUCCESS'\r\nconst ADD_GROUP_FAILED = 'ADD_GROUP_FAILED'\r\n\r\n//action creater\r\n\r\nconst addGroup = (group) => {\r\n  return dispatch => {\r\n    return new Promise((resolve, reject)=>{\r\n      dispatch({type: ADD_GROUP_REQUEST, isLoading: true})\r\n      const add = async () => {\r\n        try{\r\n          const res = await axios.post('/admin/students/groups/add', group)\r\n          if(res.data.success === 0)\r\n            throw res.data\r\n          dispatch({type:ADD_GROUP_SUCCESS, isLoading: false, payload: res.data.group_details})\r\n          dispatch(notificationSuccess(res.data.message))\r\n          resolve(res.data.group_details)\r\n        }catch(error){\r\n          dispatch({type:ADD_GROUP_FAILED, isLoading: false})\r\n          dispatch(notificationError(error.message))\r\n          reject()\r\n        }\r\n      }\r\n      add()\r\n    })\r\n  }\r\n} \r\n\r\n\r\nconst addStudent = (data) => {\r\n\r\n  return  dispatch => {\r\n    return  new Promise((resolve, reject)=>{\r\n      dispatch({type: ADD_STUDENT_REQUEST, isLoading: true})\r\n      fetch = async () => {\r\n        try{\r\n          const fd = new FormData();\r\n          fd.append('admin_id', data.admin_id)\r\n          fd.append('college_id', data.college_id)\r\n          fd.append('group_id', data.group_id)\r\n          fd.append('name', data.name)\r\n          fd.append('email', data.email)\r\n          fd.append('roll_no', data.roll_no)\r\n          fd.append('mobile', data.mobile)\r\n          \r\n          const res = await axios.post('/admin/students/add',fd)\r\n          if(res.data.success === 0)\r\n          throw res.data\r\n          dispatch({type: ADD_STUDENT_SUCCESS, isLoading: false, payload: res.data.student_details})\r\n          resolve({message: res.data.message})\r\n          \r\n        }catch(error){\r\n          dispatch({type: ADD_STUDENT_FAILED, isLoading: false})\r\n          reject({message: error.message})\r\n        }\r\n      }\r\n\r\n      fetch()\r\n\r\n    })\r\n  }\r\n}\r\n\r\nconst loadGroups = (id) => {\r\n  return async (dispatch) => {\r\n    dispatch({type: GROUP_LOAD_REQUEST, isLoading: true,});\r\n    try {\r\n      const res = await axios(\r\n        `http://foliox.deepinferx.in/web/api/admin/students/groups/get?admin=${id}`\r\n      );\r\n      const {\r\n        data: { groups },\r\n      } = res;\r\n      dispatch({ type: GROUP_LOAD_SUCCESS, payload: groups, isLoading: false,});\r\n    } catch (error) {\r\n      dispatch({ type: GROUP_LOAD_FAILED, isLoading: false,});\r\n      dispatch(notificationError(error.message));\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\nconst deleteGroup = (group_id, admin_id) => {\r\n  console.log(group_id, admin_id)\r\n  return async (dispatch) => {\r\n    dispatch({type: GROUP_DELETE_REQUEST, isLoading: true});\r\n\r\n    try {\r\n      const fd = new FormData();\r\n      fd.append('admin', admin_id)\r\n      fd.append('group', group_id)\r\n      const res = await axios.post(\"/admin/students/groups/delete\",\r\n        fd\r\n      );\r\n      if (res.data.success === 0) {\r\n        throw res.data;\r\n      }\r\n      dispatch({type: GROUP_DELETE_SUCCESS, isLoading: false, payload: group_id});\r\n      dispatch(notificationSuccess(res.data.message));\r\n    } catch (error) {\r\n      dispatch({type: GROUP_DELETE_FAILED, isLoading: false});\r\n      dispatch(notificationError(error.message));\r\n    }\r\n  };\r\n};\r\n\r\nconst deleteStudent = (student, admin_id) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: DELETE_STUDENT_REQUEST,\r\n      isLoading: true,\r\n    });\r\n    try {\r\n      const fd = new FormData();\r\n      fd.append('admin_id', admin_id)\r\n      fd.append('student_id', student.id);\r\n      const res = await axios.post(\"/admin/students/delete\", fd);\r\n      if (res.data.success === 0) {\r\n        throw { message: res.data.message };\r\n      }\r\n      dispatch({ type: DELETE_STUDENT_SUCCESS,payload: student, isLoading: false });\r\n      dispatch(notificationSuccess(res.data.message));\r\n    } catch (error) {\r\n      dispatch({\r\n        type: DELETE_STUDENT_FAILED,\r\n        isLoading: false,\r\n      });\r\n      dispatch(notificationError(error.message));\r\n    }\r\n  };\r\n};\r\n\r\nconst updateStudent = (student, admin_id) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: UPDATE_STUDENT_REQUEST,\r\n      isLoading: true,\r\n    });\r\n\r\n    try {\r\n      const fd = new FormData();\r\n      fd.append('admin_id', admin_id);\r\n      fd.append('student_id', student.id);\r\n      fd.append('name', student.name);\r\n      fd.append('email', student.email);\r\n      fd.append('mobile', student.mobile);\r\n      fd.append('pass', student.password);\r\n      \r\n      const res = await axios.post(\"/admin/students/update\", fd, {\r\n        headers: {\r\n          'Content-type':'multipart/form-data'\r\n        }\r\n      });\r\n      if (res.data.success === 0) throw { message: res.data.message };\r\n      dispatch({ type: UPDATE_STUDENT_SUCCESS, payload: student, isLoading: false });\r\n      dispatch(notificationSuccess(res.data.message));\r\n    } catch (error) {\r\n      dispatch({ type: UPDATE_STUDENT_FAILED, isLoading: false });\r\n      dispatch(notificationError(error.message));\r\n    }\r\n  };\r\n};\r\n\r\n//reducer\r\n\r\nconst groupReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case GROUP_LOAD_SUCCESS:\r\n      return {\r\n        ...state,\r\n        groups: action.payload,\r\n      }\r\n\r\n    case DELETE_STUDENT_SUCCESS: \r\n      {\r\n        const deletedStudent = action.payload\r\n        const group_id = deletedStudent.group_id\r\n        const student_id = deletedStudent.id\r\n        const studentGroup = state.groups.filter(group=>group.id === group_id)[0]  \r\n        const remainingGroup = state.groups.filter(group => group.id !== group_id)\r\n        return {\r\n          ...state,\r\n          groups: [...remainingGroup, {\r\n            ...studentGroup,\r\n            students: [...studentGroup.students.filter(student => student.id !== student_id)]\r\n          }]\r\n        };\r\n      }\r\n      \r\n\r\n    case UPDATE_STUDENT_SUCCESS:\r\n      {\r\n        const updatedStudent = action.payload\r\n        const group_id = updatedStudent.group_id\r\n        const student_id = updatedStudent.id\r\n        const studentGroup = state.groups.filter(group=>group.id === group_id)[0]\r\n        const remainingGroup = state.groups.filter(group => group.id !== group_id)\r\n        return {\r\n            ...state,\r\n            groups: [...remainingGroup,{\r\n              ...studentGroup,\r\n              students: [...studentGroup.students.filter(student => student.id !== student_id), {...updatedStudent}]\r\n            }]\r\n          }\r\n      } \r\n\r\n\r\n    case GROUP_DELETE_SUCCESS: \r\n    {\r\n      const group_id = action.payload\r\n      return {\r\n        ...state,\r\n        groups: [...state.groups.filter(group => group.id != group_id)]\r\n      }\r\n    }\r\n      \r\n    case ADD_STUDENT_SUCCESS:\r\n    {\r\n      const newStudent = action.payload\r\n      const group_id = newStudent.group_id\r\n      const remainingGroup = state.groups.filter(group=>group.id !== group_id)\r\n      const newStudentGroup = state.groups.filter(group => group.id === group_id)[0]\r\n      return {\r\n        ...state,\r\n        groups: [...remainingGroup, {\r\n          ...newStudentGroup,\r\n          students: [...newStudentGroup.students, newStudent]\r\n        }]\r\n      }\r\n    }\r\n\r\n    case ADD_GROUP_SUCCESS: \r\n    {\r\n      const group = action.payload\r\n      return {\r\n        ...state,\r\n        groups: [...state.group, group]\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//export\r\n\r\nexport default groupReducer;\r\nexport { loadGroups, deleteGroup, deleteStudent, updateStudent, addStudent, addGroup };\r\n","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\isLoading\\index.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\NavBar\\index.js",["180","181","182","183"],"import React, { useEffect, useContext } from \"react\";\r\nimport { Link as RouterLink, Navigate, useLocation } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport PeopleAltIcon from \"@material-ui/icons/PeopleAlt\";\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Divider,\r\n  Drawer,\r\n  List,\r\n  Typography,\r\n  makeStyles,\r\n  ListItem,\r\n  Collapse,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  BarChart as BarChartIcon,\r\n  Settings as SettingsIcon,\r\n  User as UserIcon,\r\n  Users as UsersIcon,\r\n} from \"react-feather\";\r\nimport NavItem from \"./NavItem\";\r\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst items = [\r\n  {\r\n    href: \"../home\",\r\n    icon: BarChartIcon,\r\n    title: \"Dashboard\",\r\n  },\r\n  {\r\n    href: \"../student-group\",\r\n    icon: UsersIcon,\r\n    title: \"Student Groups\",\r\n  },\r\n\r\n  {\r\n    href: \"../account\",\r\n    icon: UserIcon,\r\n    title: \"Account\",\r\n  },\r\n  {\r\n    href: \"../settings\",\r\n    icon: SettingsIcon,\r\n    title: \"Settings\",\r\n  },\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mobileDrawer: {\r\n    width: 256,\r\n  },\r\n  desktopDrawer: {\r\n    width: 300,\r\n    height: \"100% \",\r\n  },\r\n  avatar: {\r\n    cursor: \"pointer\",\r\n    width: 64,\r\n    height: 64,\r\n  },\r\n  studentGroup: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    padding: theme.spacing(1),\r\n    color: theme.palette.text.secondary,\r\n    fontWeight: theme.typography.fontWeightMedium,\r\n  },\r\n  title: {\r\n    marginRight: \"auto\",\r\n    fontSize: \"0.87rem\",\r\n  },\r\n  icon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst NavBar = () => {\r\n  // For handling student group nested list\r\n  const [open, setOpen] = React.useState(true);\r\n\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const groups = useSelector((store) => store.group.groups);\r\n  groups?.sort((a, b)=> parseInt(a.id, 10) - parseInt(b.id, 10))\r\n  const adminName = useSelector((store) => store.auth.user.user.name);\r\n  const adminEmail = useSelector((store) => store.auth.user.user.email);\r\n  const planExpireDate = useSelector(\r\n    (store) => store.auth.user.user.plan_expire_date\r\n  );\r\n  const classes = useStyles();\r\n  const content = (\r\n    <Box height=\"100%\" display=\"flex\" flexDirection=\"column\" >\r\n      <Box alignItems=\"center\" display=\"flex\" flexDirection=\"column\" p={2}>\r\n        <Avatar\r\n          className={classes.avatar}\r\n          component={RouterLink}\r\n          // src={user.avatar}\r\n          to=\"/app/account\"\r\n        />\r\n        <Typography className={classes.name} color=\"textPrimary\" variant=\"h5\">\r\n          {adminName}\r\n        </Typography>\r\n        <Typography color=\"textSecondary\" variant=\"body2\">\r\n          {adminEmail}\r\n        </Typography>\r\n        <Typography color=\"textSecondary\" variant=\"body2\">\r\n          Plan Expires On - <b>{planExpireDate} </b>\r\n        </Typography>\r\n      </Box>\r\n      <Divider />\r\n      <Box p={2}>\r\n        <List>\r\n          {items.map((item, idx) => {\r\n            if (item.title === \"Student Groups\") {\r\n              return (\r\n                <List\r\n                  key={\"Student Groups\"}\r\n                  component=\"nav\"\r\n                  aria-labelledby=\"nested-list-subheader\"\r\n                  className={classes.root}\r\n                >\r\n                  <ListItem\r\n                    button\r\n                    onClick={handleClick}\r\n                    className={classes.studentGroup}\r\n                  >\r\n                    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                      <PeopleAltIcon size={10} className={classes.icon} />\r\n                      <span primary=\"Student Groups\" className={classes.title}>\r\n                        Student Group\r\n                      </span>\r\n                    </div>\r\n\r\n                    {open ? <ExpandLess /> : <ExpandMore />}\r\n                  </ListItem>\r\n                  <Collapse\r\n                    style={{ paddingLeft: 30 }}\r\n                    in={open}\r\n                    timeout=\"auto\"\r\n                    unmountOnExit\r\n                  >\r\n                    <List component=\"div\" disablePadding>\r\n                      <NavItem\r\n                        href={\"add\"}\r\n                        title={<span>&#xFF0B; &nbsp; New</span>}\r\n                      />\r\n                      {groups &&\r\n                        groups.map((group, idx) => (\r\n                          <NavItem\r\n                            key={idx}\r\n                            href={`id=${group.id}`}\r\n                            title={group.group_name}\r\n                          />\r\n                        ))}\r\n                    </List>\r\n                  </Collapse>\r\n                </List>\r\n              );\r\n            } else {\r\n              return (\r\n                <NavItem\r\n                  href={item.href}\r\n                  key={idx}\r\n                  title={item.title}\r\n                  icon={item.icon}\r\n                />\r\n              );\r\n            }\r\n          })}\r\n        </List>\r\n      </Box>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <>\r\n        <Drawer\r\n          anchor=\"left\"\r\n          classes={{ paper: classes.desktopDrawer }}\r\n          open\r\n          variant=\"persistent\"\r\n        >\r\n          {content}\r\n        </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nNavBar.propTypes = {\r\n  onMobileClose: PropTypes.func,\r\n  openMobile: PropTypes.bool,\r\n};\r\n\r\nNavBar.defaultProps = {\r\n  onMobileClose: () => {},\r\n  openMobile: false,\r\n};\r\n\r\nexport default NavBar;\r\n","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\CustomButton\\CustomButton.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Card\\Card.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\CustomTypography\\Typography.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\CustomInput\\CustomInput.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Select\\Select.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\assets\\style\\pages\\AdminRegister\\RegistrationOverlay.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\assets\\style\\pages\\AdminRegister\\AdminRegister.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Modal\\index.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\NavBar\\NavItem.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\notification\\index.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Notification\\Notification.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\message\\index.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\modal\\index.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Modal\\ModalRoot.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Modal\\AddStudentModal.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\AddGroup.js",["184","185"],"import React, { useState } from 'react'\r\nimport Input from 'components/CustomInput/CustomInput'\r\nimport Button from 'components/CustomButton/CustomButton'\r\nimport { Grid, TextField, Typography } from '@material-ui/core'\r\nimport {useDropzone} from 'react-dropzone';\r\nimport dropzoneLogo from 'assets/logo/drop-zone-icon.png'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {notificationError} from 'store/notification'\r\nimport {addGroup} from 'store/group'\r\nimport {useNavigate} from 'react-router-dom'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\nimport Link from '@material-ui/core/Link';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n      '& > * + *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n    },\r\n  }));\r\n\r\n  \r\nconst BreadCrumb = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>   \r\n          <Breadcrumbs separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\">\r\n            <Link color=\"inherit\" href=\"#\">\r\n              Student Groups\r\n            </Link>\r\n            <Typography color=\"textPrimary\" >+ New</Typography>\r\n          </Breadcrumbs>\r\n        </div>\r\n      );\r\n}\r\n\r\nconst Header = ({addGroupHandler, groupName, setGroupName}) => {\r\n    return (\r\n        <>\r\n        <Grid container alignItems=\"center\" >\r\n            <Grid item xs={12} style={{marginBottom: 50}}>\r\n                <BreadCrumb />\r\n                <Typography variant=\"h6\">Create a new group</Typography>\r\n            </Grid>\r\n            <Grid item xs={10}  >\r\n                <Input\r\n                    label=\"Group Name\"\r\n                    background=\"blueDark\"\r\n                    value={groupName}\r\n                    onChange={(e)=>setGroupName(e.target.value)}\r\n                />\r\n            </Grid>\r\n            <Grid item container justify=\"space-around\" xs={2} >\r\n                <Button\r\n                    text=\"+ Add Group\"\r\n                    background=\"white\"\r\n                    border=\"borderBlue\"\r\n                    onClick={addGroupHandler}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nconst DropZone = ({ acceptedFiles, getRootProps, getInputProps}) => {\r\n    const files = acceptedFiles.map(file => (\r\n      <div style={{border:'1px solid rgba(0,0,0,0.3)', padding:20, marginTop: 20, marginBottom: 20, backgroundColor: 'rgba(0,0,0,0.1)', borderRadius: '10px'}} key={file.path}>\r\n        {file.path} - {file.size} bytes\r\n      </div> \r\n    ));\r\n  \r\n    return (\r\n      <section className=\"container\" >\r\n        <div {...getRootProps({className: 'dropzone'})} \r\n        style={{\r\n            outline: 'none',\r\n            border:acceptedFiles.length <= 0 ? '1px solid #000' : '1px solid #394AAB',\r\n            height:'50vh',\r\n            display: 'flex', \r\n            justifyContent: \"center\", \r\n            alignItems: 'center',\r\n            borderRadius: '10px'\r\n            }}>\r\n          <input {...getInputProps()}  />\r\n          <div \r\n          style={{\r\n            display: 'flex', \r\n            flexDirection: 'column', \r\n            justifyContent: 'center', \r\n            alignItems: 'center'}}\r\n          >\r\n            <img src={dropzoneLogo} width={80} />\r\n            <p style={{textAlign:'center'}}>Upload list of students with .csv extension in the format <br/>\r\n                (name, roll_no, email, mobile_no)\r\n            </p>\r\n          </div>\r\n          \r\n        </div>\r\n        <aside >\r\n          {files}\r\n        </aside>\r\n      </section>\r\n    );\r\n}\r\n\r\nconst OtherGroups = () => {\r\n    const groups = useSelector(store => store.group.groups)\r\n    return (\r\n      <Grid >\r\n        <Typography>Your other groups</Typography>\r\n        {groups.map((group) => {\r\n          return (\r\n            <Button\r\n              key={group.id}\r\n              text={group.group_name}\r\n              background=\"backgroundBlueLight\"\r\n              color=\"white\"\r\n              to={`../id=${group.id}`}\r\n            />\r\n          );\r\n        })}\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  const Footer = () => {\r\n      return  <Typography align=\"center\">Designed and developed by DeepInderX</Typography>\r\n  }\r\n\r\nexport default function AddGroup() {\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const {acceptedFiles, getRootProps, getInputProps} = useDropzone({maxFiles: 1, accept: '.csv'});\r\n    const [groupName, setGroupName] = useState(\"\")\r\n    const admin_id = useSelector(store => store.auth.user.access_key.admin_id)\r\n    const college_id = useSelector(store => store.auth.user.college.id)\r\n\r\n    const addGroupHandler = () => {\r\n        if(acceptedFiles.length !== 1){\r\n            dispatch(notificationError('Please Select File'))\r\n            return;\r\n        }\r\n        if(groupName.trim() === \"\"){\r\n            dispatch(notificationError('Enter valid Group Name'))\r\n            return\r\n        }\r\n\r\n        const fd = new FormData();\r\n        fd.append('admin_id', admin_id)\r\n        fd.append('college_id', college_id)\r\n        fd.append('group_name', groupName)\r\n        fd.append('student_list', acceptedFiles[0])\r\n        dispatch(addGroup(fd))\r\n        .then(group => navigate(`/admin/dashboard/group/id=${group.id}`, {replace: true})).catch()\r\n    }\r\n    return (\r\n        <Grid style={{paddingRight: 200, position: 'relative', height: '90vh'}}>\r\n            <Grid style={{marginBottom: 30}}>\r\n                <Header addGroupHandler={addGroupHandler} setGroupName={setGroupName} groupName={groupName}/>\r\n            </Grid>\r\n            <Grid style={{marginBottom: 30}}>\r\n                <DropZone acceptedFiles={acceptedFiles} getRootProps={getRootProps} getInputProps={getInputProps}/>\r\n            </Grid>\r\n            <OtherGroups />\r\n            <div style={{ position: 'absolute', bottom: '0px', width:'100%',   }}>\r\n                <Footer  />\r\n            </div>\r\n        </Grid>\r\n    )\r\n}\r\n",{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":63,"column":7,"nodeType":"192","messageId":"193","endLine":63,"endColumn":15},{"ruleId":"194","severity":1,"message":"195","line":101,"column":26,"nodeType":"196","messageId":"197","endLine":101,"endColumn":33},{"ruleId":"198","severity":1,"message":"199","line":55,"column":6,"nodeType":"200","endLine":55,"endColumn":8,"suggestions":"201"},{"ruleId":"194","severity":1,"message":"202","line":2,"column":3,"nodeType":"196","messageId":"197","endLine":2,"endColumn":14},{"ruleId":"194","severity":1,"message":"203","line":17,"column":34,"nodeType":"196","messageId":"197","endLine":17,"endColumn":38},{"ruleId":"194","severity":1,"message":"204","line":27,"column":8,"nodeType":"196","messageId":"197","endLine":27,"endColumn":24},{"ruleId":"205","severity":1,"message":"206","line":77,"column":5,"nodeType":"207","messageId":"208","endLine":77,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":190,"column":35,"nodeType":"211","messageId":"212","endLine":190,"endColumn":42},{"ruleId":"194","severity":1,"message":"213","line":1,"column":28,"nodeType":"196","messageId":"197","endLine":1,"endColumn":36},{"ruleId":"194","severity":1,"message":"214","line":1,"column":38,"nodeType":"196","messageId":"197","endLine":1,"endColumn":48},{"ruleId":"205","severity":1,"message":"215","line":30,"column":5,"nodeType":"207","messageId":"208","endLine":30,"endColumn":13},{"ruleId":"198","severity":1,"message":"216","line":48,"column":6,"nodeType":"200","endLine":48,"endColumn":8,"suggestions":"217"},{"ruleId":"194","severity":1,"message":"214","line":1,"column":17,"nodeType":"196","messageId":"197","endLine":1,"endColumn":27},{"ruleId":"194","severity":1,"message":"218","line":1,"column":29,"nodeType":"196","messageId":"197","endLine":1,"endColumn":38},{"ruleId":"194","severity":1,"message":"219","line":2,"column":10,"nodeType":"196","messageId":"197","endLine":2,"endColumn":27},{"ruleId":"194","severity":1,"message":"220","line":2,"column":46,"nodeType":"196","messageId":"197","endLine":2,"endColumn":65},{"ruleId":"221","severity":1,"message":"222","line":40,"column":9,"nodeType":"223","messageId":"224","endLine":40,"endColumn":52},{"ruleId":"194","severity":1,"message":"220","line":2,"column":28,"nodeType":"196","messageId":"197","endLine":2,"endColumn":47},{"ruleId":"186","severity":1,"message":"225","line":60,"column":7,"nodeType":"196","messageId":"226","endLine":60,"endColumn":12},{"ruleId":"221","severity":1,"message":"222","line":145,"column":9,"nodeType":"223","messageId":"224","endLine":145,"endColumn":45},{"ruleId":"221","severity":1,"message":"222","line":180,"column":35,"nodeType":"223","messageId":"224","endLine":180,"endColumn":71},{"ruleId":"227","severity":1,"message":"228","line":239,"column":59,"nodeType":"229","messageId":"208","endLine":239,"endColumn":61},{"ruleId":"194","severity":1,"message":"218","line":1,"column":17,"nodeType":"196","messageId":"197","endLine":1,"endColumn":26},{"ruleId":"194","severity":1,"message":"214","line":1,"column":28,"nodeType":"196","messageId":"197","endLine":1,"endColumn":38},{"ruleId":"194","severity":1,"message":"230","line":2,"column":30,"nodeType":"196","messageId":"197","endLine":2,"endColumn":38},{"ruleId":"194","severity":1,"message":"231","line":2,"column":40,"nodeType":"196","messageId":"197","endLine":2,"endColumn":51},{"ruleId":"194","severity":1,"message":"232","line":4,"column":16,"nodeType":"196","messageId":"197","endLine":4,"endColumn":25},{"ruleId":"233","severity":1,"message":"234","line":98,"column":13,"nodeType":"235","endLine":98,"endColumn":50},"no-native-reassign",["236"],"no-negated-in-lhs",["237"],"no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","no-unused-vars","'message' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["238"],"'Breadcrumbs' is defined but never used.","'Link' is defined but never used.","'NavigateNextIcon' is defined but never used.","no-dupe-keys","Duplicate key 'backgroundColor'.","ObjectExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'useState' is defined but never used.","'useContext' is defined but never used.","Duplicate key 'overflow'.","React Hook useEffect has missing dependencies: 'admin_id' and 'dispatch'. Either include them or remove the dependency array.",["239"],"'useEffect' is defined but never used.","'notificationClear' is defined but never used.","'notificationSuccess' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","Read-only global 'fetch' should not be modified.","nativeReassign","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'Navigate' is defined but never used.","'useLocation' is defined but never used.","'TextField' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},"Update the dependencies array to be: [dispatch]",{"range":"244","text":"245"},"Update the dependencies array to be: [admin_id, dispatch]",{"range":"246","text":"247"},[1607,1609],"[dispatch]",[1230,1232],"[admin_id, dispatch]"]