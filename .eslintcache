[{"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\index.js":"1","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\App.js":"2","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\index.js":"3","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\routes.js":"4","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\LoadingSpinner\\LoadingSpinner.js":"5","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Landing\\Landing.js":"6","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\GetStarted\\GetStarted.js":"7","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\AdminRegister\\AdminRegister.js":"8","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\AdminOption\\AdminOption.js":"9","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\AdminLogin\\AdminLogin.js":"10","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\AdminRegister\\RegistrationOverlay.js":"11","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\Group.js":"12","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\DashboardLayout.js":"13","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\Home.js":"14","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\college\\index.js":"15","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\auth\\index.js":"16","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\group\\index.js":"17","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\isLoading\\index.js":"18","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\NavBar\\index.js":"19","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Navbar\\Navbar.js":"20","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\CustomButton\\CustomButton.js":"21","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Card\\Card.js":"22","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\CustomTypography\\Typography.js":"23","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\CustomInput\\CustomInput.js":"24","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Select\\Select.js":"25","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\assets\\style\\pages\\AdminRegister\\RegistrationOverlay.js":"26","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\assets\\style\\pages\\AdminRegister\\AdminRegister.js":"27","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Modal\\index.js":"28","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\NavBar\\NavItem.js":"29","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\notification\\index.js":"30","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Notification\\Notification.js":"31","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\message\\index.js":"32","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\modal\\index.js":"33","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Modal\\ModalRoot.js":"34","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Modal\\AddStudentModal.js":"35","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\AddGroup.js":"36"},{"size":590,"mtime":1616222029161,"results":"37","hashOfConfig":"38"},{"size":922,"mtime":1616437190860,"results":"39","hashOfConfig":"38"},{"size":1125,"mtime":1616435912414,"results":"40","hashOfConfig":"38"},{"size":1622,"mtime":1616524013097,"results":"41","hashOfConfig":"38"},{"size":336,"mtime":1616222029158,"results":"42","hashOfConfig":"38"},{"size":2381,"mtime":1616222029169,"results":"43","hashOfConfig":"38"},{"size":1848,"mtime":1616222029168,"results":"44","hashOfConfig":"38"},{"size":8520,"mtime":1616222029164,"results":"45","hashOfConfig":"38"},{"size":1857,"mtime":1616222029163,"results":"46","hashOfConfig":"38"},{"size":4940,"mtime":1616222029163,"results":"47","hashOfConfig":"38"},{"size":1515,"mtime":1616222029164,"results":"48","hashOfConfig":"38"},{"size":12724,"mtime":1616523586738,"results":"49","hashOfConfig":"38"},{"size":1570,"mtime":1616614985055,"results":"50","hashOfConfig":"38"},{"size":163,"mtime":1616222029167,"results":"51","hashOfConfig":"38"},{"size":1680,"mtime":1616309368590,"results":"52","hashOfConfig":"38"},{"size":1781,"mtime":1616309318354,"results":"53","hashOfConfig":"38"},{"size":8497,"mtime":1616590927739,"results":"54","hashOfConfig":"38"},{"size":259,"mtime":1616222029172,"results":"55","hashOfConfig":"38"},{"size":5496,"mtime":1616612607455,"results":"56","hashOfConfig":"38"},{"size":1416,"mtime":1616222029159,"results":"57","hashOfConfig":"38"},{"size":2078,"mtime":1616584039110,"results":"58","hashOfConfig":"38"},{"size":1835,"mtime":1616222029154,"results":"59","hashOfConfig":"38"},{"size":629,"mtime":1616222029156,"results":"60","hashOfConfig":"38"},{"size":1714,"mtime":1616584103527,"results":"61","hashOfConfig":"38"},{"size":1187,"mtime":1616222029160,"results":"62","hashOfConfig":"38"},{"size":549,"mtime":1616222029152,"results":"63","hashOfConfig":"38"},{"size":670,"mtime":1616222029152,"results":"64","hashOfConfig":"38"},{"size":1189,"mtime":1616438161281,"results":"65","hashOfConfig":"38"},{"size":1679,"mtime":1616222029166,"results":"66","hashOfConfig":"38"},{"size":1265,"mtime":1616389336368,"results":"67","hashOfConfig":"38"},{"size":1678,"mtime":1616350025250,"results":"68","hashOfConfig":"38"},{"size":1841,"mtime":1616437979912,"results":"69","hashOfConfig":"38"},{"size":877,"mtime":1616435847329,"results":"70","hashOfConfig":"38"},{"size":497,"mtime":1616474323551,"results":"71","hashOfConfig":"38"},{"size":2551,"mtime":1616523357085,"results":"72","hashOfConfig":"38"},{"size":6087,"mtime":1616615039258,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1ntz6rp",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"76"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"76"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"76"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"76"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\index.js",[],["154","155"],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\App.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\index.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\routes.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\LoadingSpinner\\LoadingSpinner.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Landing\\Landing.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\GetStarted\\GetStarted.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\AdminRegister\\AdminRegister.js",["156","157"],"import { Grid } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport Navbar from \"components/Navbar/Navbar\";\r\nimport fx from \"assets/logo/fx.png\";\r\nimport Typography from \"components/CustomTypography/Typography\";\r\nimport useStyles from \"assets/style/pages/AdminRegister/AdminRegister\";\r\nimport CustomInput from \"components/CustomInput/CustomInput\";\r\nimport CustomButton from \"components/CustomButton/CustomButton\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\";\r\nconst circle = <span>&#9675;&nbsp;</span>;\r\n\r\nexport default function Landing(props) {\r\n  //States for all the input field\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [collegeName, setCollegeName] = useState(\"\");\r\n  const [collegeLinkedin, setCollegeLinkedin] = useState(\"\");\r\n  const [collegeAddress, setCollegeAddress] = useState(\"\");\r\n\r\n  /**\r\n   * Function for handling change in input field\r\n   * @param event\r\n   *\r\n   */\r\n\r\n  const handelChange = ({ target: { name: type, value } }) => {\r\n    switch (type) {\r\n      case \"Name\":\r\n        setName(value);\r\n        break;\r\n\r\n      case \"Email\":\r\n        setEmail(value);\r\n        break;\r\n\r\n      case \"MobileNumber\":\r\n        setMobileNumber(value);\r\n        break;\r\n\r\n      case \"Password\":\r\n        setPassword(value);\r\n        break;\r\n\r\n      case \"ConfirmPassword\":\r\n        setConfirmPassword(value);\r\n        break;\r\n\r\n      case \"CollegeName\":\r\n        setCollegeName(value);\r\n        break;\r\n\r\n      case \"CollegeLinkedin\":\r\n        setCollegeLinkedin(value);\r\n        break;\r\n\r\n      case \"CollegeAddress\":\r\n        setCollegeAddress(value);\r\n\r\n      default:\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function to handler Register submit\r\n   * @param event\r\n   */\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    setName((name) => name.trim());\r\n    setEmail((email) => email.trim());\r\n    setMobileNumber((mobileNumber) => mobileNumber.trim());\r\n    setPassword((password) => password.trim());\r\n    setConfirmPassword((confirmPassword) => confirmPassword.trim());\r\n    setCollegeName((collegeName) => collegeName.trim());\r\n    setCollegeLinkedin((collegeLinkedin) => collegeLinkedin.trim());\r\n    setCollegeAddress((collegeAddress) => collegeAddress.trim());\r\n\r\n    //Error notification when password and confirm password didn't match\r\n    // if (password !== confirmPassword) {\r\n    //   setError({ message: \"Password didn't match\" });\r\n\r\n    //   return;\r\n    // }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"name\", name);\r\n    formData.append(\"email\", email);\r\n    formData.append(\"mobile\", mobileNumber);\r\n    formData.append(\"password\", password);\r\n    formData.append(\"college_name\", collegeName);\r\n    formData.append(\"college_linked_in\", collegeLinkedin);\r\n    formData.append(\"college_add\", collegeAddress);\r\n    axios\r\n      .post(\"http://foliox.deepinferx.in/web/api/admin/register\", formData)\r\n      .then((res) => {\r\n        const { success, message } = res.data;\r\n\r\n        //if success = 0 something wrong\r\n        if (success === 0) {\r\n          setTimeout(() => {\r\n            // setError({ message });\r\n          }, 100);\r\n        }\r\n\r\n        //if success = 1 Registeration successfull\r\n        if (success === 1) {\r\n          props.history.push(\"/admin/registration-confirmation-overlay\");\r\n        }\r\n      })\r\n      .catch((e) => {});\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <form onSubmit={submitHandler} className={classes.root}>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        style={{\r\n          height: \"100vh\",\r\n        }}\r\n      >\r\n        <Grid item className={classes.top}></Grid>\r\n        <Grid className={classes.main} item container>\r\n          <Grid item xs={12} style={{ height: \"100px\" }}>\r\n            <Navbar logo={fx} />\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.title}>\r\n            <Typography\r\n              variant=\"h4\"\r\n              align=\"center\"\r\n              component=\"p\"\r\n              fontWeight=\"800\"\r\n            >\r\n              Registration From\r\n            </Typography>\r\n          </Grid>\r\n\r\n          <Grid\r\n            item\r\n            direction=\"row\"\r\n            justify=\"space-around\"\r\n            style={{ flexGrow: \"1\" }}\r\n            container\r\n          >\r\n            <Grid item className={classes.mainLeft} xs={4}>\r\n              <Typography\r\n                variant=\"subtitle1\"\r\n                align=\"center\"\r\n                component=\"p\"\r\n                fontWeight=\"800\"\r\n                gutterBottom\r\n              >\r\n                Personal Details\r\n              </Typography>\r\n\r\n              <CustomInput\r\n                label=\"Name*\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={name}\r\n                name=\"Name\"\r\n                onChange={handelChange}\r\n                autoFocus\r\n                required\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"E-mail*\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={email}\r\n                name=\"Email\"\r\n                onChange={handelChange}\r\n                required\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"Mobile Number*\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={mobileNumber}\r\n                name=\"MobileNumber\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"Password*\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={password}\r\n                type=\"password\"\r\n                name=\"Password\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"Confirm Password*\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={confirmPassword}\r\n                name=\"ConfirmPassword\"\r\n                type=\"password\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Typography\r\n                variant=\"subtitle1\"\r\n                align=\"center\"\r\n                component=\"p\"\r\n                fontWeight=\"800\"\r\n                gutterBottom\r\n              >\r\n                College Details\r\n              </Typography>\r\n              <CustomInput\r\n                background=\"brown\"\r\n                label=\"College Name *\"\r\n                fullWidth\r\n                value={collegeName}\r\n                name=\"CollegeName\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"College LinkedIn Profile\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                value={collegeLinkedin}\r\n                name=\"CollegeLinkedin\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n              <CustomInput\r\n                background=\"brown\"\r\n                label=\"College Address *\"\r\n                fullWidth\r\n                multiline\r\n                rows=\"5\"\r\n                cols=\"30\"\r\n                value={collegeAddress}\r\n                name=\"CollegeAddress\"\r\n                required\r\n                onChange={handelChange}\r\n              ></CustomInput>\r\n              <CustomButton\r\n                text={\"Login\"}\r\n                logo={circle}\r\n                to={\"/admin/login\"}\r\n                background=\"white\"\r\n                border=\"borderGray\"\r\n              />\r\n              <CustomButton\r\n                type=\"submit\"\r\n                text={\"Register\"}\r\n                background=\"brown\"\r\n              />\r\n            </Grid>\r\n            <Grid item container justify=\"center\" alignItems=\"center\" xs={12}>\r\n              <Typography variant=\"subtitle2\" align=\"center\">\r\n                * The (*) marked fields are required. Read our policy to know\r\n                how we use your data.\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\AdminOption\\AdminOption.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\AdminLogin\\AdminLogin.js",["158"],"import React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n//@material-ui core components\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Typography from \"components/CustomTypography/Typography\";\r\nimport CustomInput from \"components/CustomInput/CustomInput\";\r\nimport CustomButton from \"components/CustomButton/CustomButton\";\r\nimport Navbar from \"components/Navbar/Navbar\";\r\nimport Select from \"components/Select/Select\";\r\n\r\nimport fx from \"assets/logo/fx.png\";\r\nimport image from \"assets/img/admin-login-image.svg\";\r\n\r\n//action creater\r\nimport { login } from \"store/auth\";\r\nimport { loadCollegeList } from \"store/college\";\r\n\r\nconst circle = <span>&#9675;&nbsp;</span>;\r\n\r\n//style\r\nconst useStyle = makeStyles((theme) => ({\r\n  root: {\r\n    minHeight: \"100vh\",\r\n  },\r\n  form: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function AdminLogin(props) {\r\n  console.log(\"Admin Login page rendered\");\r\n  const classes = useStyle();\r\n  const dispatch = useDispatch();\r\n\r\n  const collegeList = useSelector((store) => store.college.list);\r\n\r\n  const [loginCredentials, setLoginCredentials] = useState({\r\n    email: undefined,\r\n    password: undefined,\r\n    college_id: undefined,\r\n  });\r\n\r\n  const setSelectedCollege = (e) => {\r\n    console.log(e.target.value);\r\n    setLoginCredentials({ ...loginCredentials, college_id: e.target.value });\r\n  };\r\n\r\n  //Dispatch action  to fetch list of registered colleges\r\n  useEffect(() => {\r\n    dispatch(loadCollegeList());\r\n  }, []);\r\n\r\n  //Form submit handler\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append(\"college_id\", loginCredentials.college_id);\r\n    formData.append(\"email\", loginCredentials.email);\r\n    formData.append(\"password\", loginCredentials.password);\r\n\r\n    dispatch(login(formData));\r\n  };\r\n\r\n  const user = useSelector((store) => store.auth.user?.auth_token);\r\n\r\n  //If login successfull\r\n  const navigate = useNavigate();\r\n  if (user) {\r\n    navigate(\"../dashboard/home\");\r\n  }\r\n  return (\r\n    <>\r\n      <form onSubmit={submitHandler}>\r\n        <Grid className={classes.root} container direction=\"column\">\r\n          <Grid item style={{ height: \"100px\" }}>\r\n            <Navbar logo={fx} />\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography\r\n              variant=\"h4\"\r\n              align=\"center\"\r\n              component=\"p\"\r\n              fontWeight=\"800\"\r\n            >\r\n              Please enter your credentials\r\n            </Typography>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            justify=\"space-around\"\r\n            alignItems=\"center\"\r\n            className={classes.form}\r\n            direction=\"row\"\r\n          >\r\n            <Grid item xs={10} sm={4}>\r\n              <Select\r\n                background=\"brown\"\r\n                value={loginCredentials.college_id}\r\n                changeHandler={setSelectedCollege}\r\n                required\r\n              >\r\n                <option value=\"\" disabled selected hidden>\r\n                  Select college\r\n                </option>\r\n                {collegeList.map((college) => (\r\n                  <option key={college.id} value={college.id}>\r\n                    {college.college_name}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n              <CustomInput\r\n                label=\"Email\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                required\r\n                value={loginCredentials.email || \"\"}\r\n                onChange={(e) =>\r\n                  setLoginCredentials({\r\n                    ...loginCredentials,\r\n                    email: e.target.value,\r\n                  })\r\n                }\r\n              ></CustomInput>\r\n              <CustomInput\r\n                label=\"Password\"\r\n                background=\"brown\"\r\n                fullWidth\r\n                required\r\n                type=\"password\"\r\n                value={loginCredentials.password || \"\"}\r\n                onChange={(e) =>\r\n                  setLoginCredentials({\r\n                    ...loginCredentials,\r\n                    password: e.target.value,\r\n                  })\r\n                }\r\n              ></CustomInput>\r\n              <CustomButton\r\n                text={\"Forgot?\"}\r\n                logo={circle}\r\n                to={\"/get-started/\"}\r\n                background=\"white\"\r\n                border=\"borderGray\"\r\n              />\r\n              <CustomButton\r\n                type=\"submit\"\r\n                text={\"Continue\"}\r\n                background=\"brown\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <img src={image} width=\"300\" alt=\"admin login\" />\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\AdminRegister\\RegistrationOverlay.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\Group.js",["159","160"],"import {\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams, useNavigate,  } from \"react-router-dom\";\r\nimport Button from \"components/CustomButton/CustomButton\";\r\nimport ChatBubbleOutlineIcon from \"@material-ui/icons/ChatBubbleOutline\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport { deleteGroup, deleteStudent, updateStudent } from \"store/group/index\";\r\nimport {sendMessageToStudent, sendMessageToGroup} from 'store/message'\r\nimport Modal from \"components/Modal\";\r\nimport Input from \"components/CustomInput/CustomInput\";\r\nimport {showModal} from 'store/modal'\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: theme.palette.common.black,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: \"rgba(57, 74, 171, 0.7)\",\r\n      \"& *\": {\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n  tableContainer: {\r\n    border: \"1px solid #000\",\r\n    marginTop: \"20px\",\r\n    maxHeight: \"65vh\",\r\n    \"&::-webkit-scrollbar\": {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  group: {\r\n    marginTop: 50,\r\n  },\r\n});\r\n\r\nconst useMessageStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // width: 350,\r\n    width:'100%',\r\n    padding: 15,\r\n    paddingTop: 30,\r\n    paddingBottom: 40,\r\n    backgroundColor: \"e5e5e5\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    boxShadow: theme.shadows[20],\r\n    backgroundColor: '#e6e8e6'\r\n  },\r\n  receiver: {\r\n    paddingLeft: 10,\r\n    paddingRight: 10,\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    marginBottom: 15,\r\n    backgroundColor: '#fff',\r\n    \"& h3\": {\r\n      color: \"#a1a1a1\",\r\n    },\r\n    \"& p\": {\r\n      color: \"#ECB365\",\r\n      fontWeight: \"bold\",\r\n      paddingLeft: 30,\r\n    },\r\n  },\r\n  message: {\r\n    boxShadow: `${theme.shadows[20]}`,\r\n    border: \"none\",\r\n    outline: \"none\",\r\n    padding: 10,\r\n  }\r\n}));\r\n\r\n\r\nconst GroupHeader = (props) => {\r\n  const {group_id, admin_id, college_id, groupCreatedAt, openMessageModal, openDeleteModal, dispatch} = props\r\n  return (\r\n    <Grid container justify=\"space-between\" alignItems=\"center\">\r\n      <Typography>Group Details</Typography>\r\n      <Grid xs item container alignItems=\"center\" justify=\"flex-end\">\r\n        <ChatBubbleOutlineIcon\r\n        onClick={() => openMessageModal()}\r\n          style={{ color: \"rgba(57, 74, 171, 1)\", marginRight: 10 }}\r\n        />\r\n        <AddIcon\r\n          onClick={() => dispatch(showModal({\r\n            modalType: 'ADD_STUDENT',\r\n            modalProps: {\r\n              admin_id,\r\n              college_id,\r\n              group_id\r\n            }\r\n          })) }\r\n         style={{ color: \"rgba(57, 74, 171, 1)\", marginRight: 10 }} \r\n        />\r\n        <DeleteOutlineIcon\r\n          onClick={openDeleteModal}\r\n          style={{ color: \"rgba(57, 74, 171, 1)\", marginRight: 10 }}\r\n        />\r\n        <Typography variant=\"caption\">Created On: {groupCreatedAt}</Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\n\r\nconst StudentTable = ({ openDeleteModal, openUpdateModal, openMessageModal, students, group_name }) => {\r\n  const classes = useStyles();\r\n  students.sort((a, b)=> a.name.lenght > b.name.length)\r\n  return (\r\n    <TableContainer component={Paper} className={classes.tableContainer}>\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>{group_name}</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {students.map((student, idx) => (\r\n            <StyledTableRow key={student.id}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {idx + 1}\r\n              </StyledTableCell>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {student.name}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\">{student.roll_no}</StyledTableCell>\r\n              <StyledTableCell align=\"right\">{student.email}</StyledTableCell>\r\n              <StyledTableCell align=\"right\">{student.mobile}</StyledTableCell>\r\n              <StyledTableCell\r\n                align=\"right\"\r\n                onClick={() => openUpdateModal(student)}\r\n              >\r\n                Edit\r\n              </StyledTableCell>\r\n              <StyledTableCell\r\n                align=\"right\"\r\n                onClick={() => openDeleteModal(student)}\r\n              >\r\n                Delete\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\" onClick={()=>openMessageModal(student)}>Message</StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\n\r\nconst OtherGroups = ({grop_id, groups}) => {\r\n  \r\n  const classes = useStyles();\r\n  if(groups.length === 1)\r\n    return null;\r\n  return (\r\n    <Grid className={classes.group}>\r\n      <Typography>Your other groups</Typography>\r\n      {groups.map((group) => {\r\n        if (group.id === grop_id) return;\r\n        return (\r\n          <Button\r\n            key={group.id}\r\n            text={group.group_name}\r\n            background=\"backgroundBlueLight\"\r\n            color=\"white\"\r\n            to={`../id=${group.id}`}\r\n          />\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n};\r\n\r\n\r\nconst DeleteModal = (props) => {\r\n  const { student, CloseModal, deleteStudentHandler, deleteGroupHandler, group, ...rest } = props;\r\n  return (\r\n    <Modal CloseModal={CloseModal} {...rest}>\r\n      <Grid container direction=\"column\">\r\n        <Typography variant=\"h6\" component=\"p\">\r\n          {`Are you sure you want delete ${student.name || group.group_name} ?`}\r\n        </Typography>\r\n        <Grid item container justify=\"center\">\r\n          <Button\r\n            text=\"Delete\"\r\n            onClick={() => student?.name ? deleteStudentHandler(): deleteGroupHandler()}\r\n            background=\"backgroundBrownLight\"\r\n          />\r\n          <Button\r\n            text=\"Cancel\"\r\n            onClick={CloseModal}\r\n            background=\"backgroundBlueLight\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst UpdateStudentModal = (props) => {\r\n  const {\r\n    student,\r\n    setStudent,\r\n    CloseModal,\r\n    updateStudentHandler,\r\n    ...rest\r\n  } = props;\r\n  return (\r\n    <Modal CloseModal={CloseModal} {...rest}>\r\n      <Grid style={{ maxWidth: 300 }}>\r\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\r\n          Update\r\n        </Typography>\r\n        <Input\r\n          label=\"Name\"\r\n          value={student.name}\r\n          onChange={(e) => setStudent({ ...student, name: e.target.value })}\r\n          background=\"brown\"\r\n        />\r\n        <Input\r\n          label=\"Email\"\r\n          value={student.email}\r\n          onChange={(e) => setStudent({ ...student, email: e.target.value })}\r\n          background=\"brown\"\r\n        />\r\n        <Input\r\n          label=\"Mobile\"\r\n          value={student.mobile}\r\n          background=\"brown\"\r\n          onChange={(e) => setStudent({ ...student, mobile: e.target.value })}\r\n        />\r\n        <Input\r\n          value={student.password}\r\n          label=\"password\"\r\n          background=\"brown\"\r\n          onChange={(e) => setStudent({ ...student, password: e.target.value })}\r\n        />\r\n        <Grid item container justify=\"center\">\r\n          <Button\r\n            text=\"Update\"\r\n            onClick={updateStudentHandler}\r\n            background=\"yellow\"\r\n          />\r\n          <Button\r\n            text=\"Cancel\"\r\n            onClick={CloseModal}\r\n            background=\"backgroundBlueLight\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Modal>\r\n  );\r\n};\r\n\r\n\r\nconst MessageModal = ({  open, student, CloseModal, sendMessage, group_name }) => {\r\n  const classes = useMessageStyles();\r\n  const [message, setMessage] = useState(\"\")\r\n  return (\r\n    <Modal open={open} CloseModal={CloseModal} >\r\n      <Grid style={{minWidth:300}}>\r\n      <Typography variant=\"h6\" align=\"center\" gutterBottom>\r\n          Create Message\r\n        </Typography>\r\n        <div className={classes.receiver}>\r\n          <h3>To</h3>\r\n          <p>{student.name || group_name}</p>\r\n        </div>\r\n        <div>\r\n          <Input\r\n          label=\"Enter your message...\"\r\n            className={classes.message}\r\n            multiline\r\n            background=\"brown\"\r\n            rows=\"10\"\r\n            value={message}\r\n            onChange={(e)=>setMessage(e.target.value)}\r\n          />\r\n          <Grid item container justify=\"center\">\r\n          <Button\r\n            text=\"Send\"\r\n            onClick={()=>{\r\n              sendMessage(message)\r\n              CloseModal()\r\n            }}\r\n            background=\"yellow\"\r\n          />\r\n          <Button\r\n            text=\"Cancel\"\r\n            onClick={CloseModal}\r\n            background=\"backgroundBlueLight\"\r\n          />\r\n        </Grid>\r\n        </div>\r\n      </Grid>\r\n      \r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default function Group(props) {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const {id: group_id} = useParams();\r\n  const currentGroup = useSelector(store => store.group.groups.filter(group=>group.id === group_id)[0]);\r\n  const groupCreatedAt = currentGroup?.time;\r\n  const  {students, group_name}  = currentGroup || {};\r\n  students?.sort((a, b)=> parseInt(a.id, 10) - parseInt(b.id, 10))\r\n  const groups = useSelector((store) => store.group.groups);\r\n  const admin_id = useSelector((store) => store.auth.user.access_key.admin_id);\r\n  const college_id = useSelector(store => store.auth.user.college.id)\r\n  const [deleteModal, setDeleteModal] = useState(false);\r\n  const [student, setStudent] = useState(\"\");\r\n  const [updateModal, setUpdateModal] = useState(false);\r\n  const [messageModal, setMessageModal] = useState(false)\r\n\r\n  const CloseModal = () => {\r\n    setDeleteModal(false);\r\n    setUpdateModal(false);\r\n    setMessageModal(false);\r\n    setStudent(\"\");\r\n  };\r\n  const openDeleteModal = (student) => {\r\n    if(student)\r\n      setStudent(student);\r\n    setDeleteModal((open) => !open);\r\n  };\r\n  const deleteStudentHandler = () => {\r\n    dispatch(deleteStudent(student, admin_id));\r\n    CloseModal();\r\n  };\r\n\r\n  const deleteGroupHandler = () => {\r\n    dispatch(deleteGroup(group_id, admin_id))\r\n    CloseModal();\r\n  }\r\n\r\n  const openUpdateModal = (student) => {\r\n    setStudent(student);\r\n    setUpdateModal(true);\r\n  };\r\n\r\n  const updateStudentHandler = () => {\r\n    dispatch(updateStudent(student, admin_id));\r\n    CloseModal();\r\n  };\r\n\r\n  const openMessageModal = (student) => {\r\n    if(student)\r\n      setStudent(student);\r\n    setMessageModal(true);\r\n  }\r\n\r\n  const sendMessage = (message) => {\r\n    if(student){\r\n      dispatch(sendMessageToStudent({message, admin_id, stduent_id: student.id}))\r\n    }else{\r\n      dispatch(sendMessageToGroup({message, admin_id, group_id}))\r\n    }\r\n  }\r\n\r\n  \r\n  if(!currentGroup){\r\n    navigate('/admin/dashboard/home', {replace: true});\r\n    return <></>\r\n  }\r\n\r\n  return (\r\n    <Grid>\r\n      <GroupHeader \r\n        openMessageModal={openMessageModal}\r\n        groupCreatedAt={groupCreatedAt} \r\n        openDeleteModal={openDeleteModal}\r\n        group_id={group_id}\r\n        admin_id = {admin_id}\r\n        college_id = {college_id}\r\n        dispatch={dispatch}\r\n      />\r\n      <StudentTable\r\n        openDeleteModal={openDeleteModal}\r\n        openUpdateModal={openUpdateModal}\r\n        openMessageModal={openMessageModal}\r\n        students={students}\r\n        group_name={group_name}\r\n      />\r\n      <OtherGroups grop_id={group_id} groups={groups} />\r\n\r\n      <UpdateStudentModal\r\n        open={updateModal}\r\n        student={student}\r\n        setStudent={setStudent}\r\n        CloseModal={CloseModal}\r\n        updateStudentHandler={updateStudentHandler}\r\n      />\r\n      <DeleteModal\r\n        open={deleteModal}\r\n        CloseModal={CloseModal}\r\n        student={student}\r\n        deleteStudentHandler={deleteStudentHandler}\r\n        deleteGroupHandler={deleteGroupHandler}\r\n        group = {currentGroup}\r\n      />\r\n      \r\n      <MessageModal\r\n       open={messageModal} \r\n       student={student} \r\n       CloseModal={CloseModal}   \r\n       sendMessage={sendMessage} \r\n       group_name={group_name}\r\n       />\r\n      \r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\DashboardLayout.js",["161","162","163","164"],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\Home.js",["165","166"],"import React, { useContext, useEffect } from \"react\";\r\n\r\nexport default function Home() {\r\n\r\n  return (\r\n    <div>\r\n      <h1>Home Page</h1>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\college\\index.js",["167","168","169"],"import axios from \"axios\";\r\nimport { notificationClear,notificationError,notificationSuccess } from \"store/notification\";\r\n\r\n//constant\r\nconst COLLEGE_LIST_REQUEST = \"COLLEGE_LIST_REQUEST\";\r\nconst COLLEGE_LIST_SUCCESS = \"COLLEGE_LIST_SUCCESS\";\r\nconst COLLEGE_LIST_FAILED = \"COLLGE_LIST_FAILED\";\r\n\r\n//action creater\r\n\r\nconst collegeListRequested = () => {\r\n  return {\r\n    type: COLLEGE_LIST_REQUEST,\r\n    isLoading: true,\r\n  };\r\n};\r\n\r\nconst collegeListSuccess = (colleges) => {\r\n  return {\r\n    type: COLLEGE_LIST_SUCCESS,\r\n    payload: colleges,\r\n    isLoading: false,\r\n  };\r\n};\r\n\r\nconst collegeListFailed = () => {\r\n  return {\r\n    type: COLLEGE_LIST_FAILED,\r\n    isLoading: false,\r\n  };\r\n};\r\n\r\nconst loadCollegeList = () => {\r\n  return async (dispatch) => {\r\n    dispatch(collegeListRequested());\r\n\r\n    try {\r\n      const { data } = await axios.get(\"/gen/colleges\");\r\n      if (data.success === 0) {\r\n        throw { message: \"Something went wrong.\" };\r\n      }\r\n      dispatch(collegeListSuccess(data.colleges));\r\n    } catch (error) {\r\n      dispatch(notificationError(error.message));\r\n      dispatch(collegeListFailed());\r\n    }\r\n  };\r\n};\r\n\r\n//reducer\r\n\r\nconst initialCollegeState = {\r\n  list: [],\r\n};\r\n\r\nconst collegeReducer = (state = initialCollegeState, action) => {\r\n  switch (action.type) {\r\n    case COLLEGE_LIST_REQUEST:\r\n      return {\r\n        ...state,\r\n      };\r\n\r\n    case COLLEGE_LIST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        list: action.payload,\r\n      };\r\n\r\n    case COLLEGE_LIST_FAILED:\r\n      return {\r\n        ...state,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default collegeReducer;\r\nexport { loadCollegeList };\r\n","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\auth\\index.js",["170"],"import axios from \"axios\";\r\nimport {notificationError, notificationSuccess} from \"store/notification\";\r\n\r\n//constant\r\nconst LOGIN_REQUEST = \"LOGIN_REQUEST\";\r\nconst LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nconst LOGIN_FAILED = \"LOGIN_FAILED\";\r\n\r\n//action creater\r\n\r\nconst loginRequest = () => {\r\n  return {\r\n    type: LOGIN_REQUEST,\r\n    isLoading: true,\r\n  };\r\n};\r\n\r\nconst loginFailed = () => {\r\n  return {\r\n    type: LOGIN_FAILED,\r\n    isLoading: false,\r\n  };\r\n};\r\n\r\nconst loginSuccess = (user) => {\r\n  return {\r\n    type: LOGIN_SUCCESS,\r\n    payload: user,\r\n    isLoading: false,\r\n  };\r\n};\r\n\r\nconst login = (user) => {\r\n  return async (dispatch) => {\r\n    dispatch(loginRequest());\r\n    try {\r\n      const { data } = await axios.post(\r\n        \"http://foliox.deepinferx.in/web/api/admin/login\",\r\n        user\r\n      );\r\n\r\n      //success\r\n      if (data.success === 1) {\r\n        delete data.success;\r\n        dispatch(loginSuccess(data));\r\n      }\r\n\r\n      //login failed\r\n      else {\r\n        delete data.success;\r\n        throw data;\r\n      }\r\n    } catch (error) {\r\n      dispatch(loginFailed());\r\n      dispatch(notificationError(error.message));\r\n    }\r\n  };\r\n};\r\n\r\nconst register = (newUser) => {};\r\n\r\nconst logout = () => {};\r\n\r\n//Reducer\r\n\r\nconst initialAuthState = {\r\n  user: {},\r\n};\r\n\r\nconst authReducer = (state = initialAuthState, action) => {\r\n  switch (action.type) {\r\n    case LOGIN_REQUEST:\r\n      return {\r\n        ...state,\r\n      };\r\n\r\n    case LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n\r\n    case LOGIN_FAILED:\r\n      return {\r\n        ...state,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { login, loginSuccess, loginRequest, loginFailed, register, logout };\r\n\r\nexport default authReducer;\r\n","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\group\\index.js",["171","172","173","174"],"import axios from \"axios\";\r\nimport { notificationError,notificationSuccess } from \"store/notification\";\r\n\r\n//constant\r\nconst GROUP_LOAD_REQUEST = \"GROUP_LOAD_REQUEST\";\r\nconst GROUP_LOAD_SUCCESS = \"GROU_LOAD_SUCCESS\";\r\nconst GROUP_LOAD_FAILED = \"GROUP_LOAD_FAILED\";\r\n\r\nconst GROUP_DELETE_REQUEST = \"GROUP_DELETE_REQUEST\";\r\nconst GROUP_DELETE_SUCCESS = \"GROUP_DELETE_SUCCESS\";\r\nconst GROUP_DELETE_FAILED = \"GROUP_DELETE_FAILED\";\r\n\r\nconst DELETE_STUDENT_REQUEST = \"DELETE_STUDENT_REQUEST\";\r\nconst DELETE_STUDENT_SUCCESS = \"DELETE_STUDENT_SUCCESS\";\r\nconst DELETE_STUDENT_FAILED = \"DELETE_STUDENT_FAILED\";\r\n\r\nconst UPDATE_STUDENT_REQUEST = \"UPDATE_STUDENT_REQUEST\";\r\nconst UPDATE_STUDENT_SUCCESS = \"UPDATE_STUDENT_SUCCESS\";\r\nconst UPDATE_STUDENT_FAILED = \"UPDATE_STUDENT_FAILED\";\r\n\r\nconst ADD_STUDENT_REQUEST = \"ADD_STUDENT_REQUEST\"\r\nconst ADD_STUDENT_SUCCESS = \"ADD_STUDENT_SUCCESS\"\r\nconst ADD_STUDENT_FAILED = \"ADD_STUDENT_FAILED\"\r\n\r\nconst ADD_GROUP_REQUEST = 'ADD_GROUP_REQUEST'\r\nconst ADD_GROUP_SUCCESS = 'ADD_GROUP_SUCCESS'\r\nconst ADD_GROUP_FAILED = 'ADD_GROUP_FAILED'\r\n\r\n//action creater\r\n\r\nconst addGroup = (group) => {\r\n  return dispatch => {\r\n    return new Promise((resolve, reject)=>{\r\n      dispatch({type: ADD_GROUP_REQUEST, isLoading: true})\r\n      const add = async () => {\r\n        try{\r\n          const res = await axios.post('/admin/students/groups/add', group)\r\n          if(res.data.success === 0)\r\n            throw res.data\r\n          dispatch({type:ADD_GROUP_SUCCESS, isLoading: false, payload: res.data.group_details})\r\n          dispatch(notificationSuccess(res.data.message))\r\n          resolve(res.data.group_details)\r\n        }catch(error){\r\n          dispatch({type:ADD_GROUP_FAILED, isLoading: false})\r\n          dispatch(notificationError(error.message))\r\n          reject()\r\n        }\r\n      }\r\n      add()\r\n    })\r\n  }\r\n} \r\n\r\n\r\nconst addStudent = (data) => {\r\n\r\n  return  dispatch => {\r\n    return  new Promise((resolve, reject)=>{\r\n      dispatch({type: ADD_STUDENT_REQUEST, isLoading: true})\r\n      fetch = async () => {\r\n        try{\r\n          const fd = new FormData();\r\n          fd.append('admin_id', data.admin_id)\r\n          fd.append('college_id', data.college_id)\r\n          fd.append('group_id', data.group_id)\r\n          fd.append('name', data.name)\r\n          fd.append('email', data.email)\r\n          fd.append('roll_no', data.roll_no)\r\n          fd.append('mobile', data.mobile)\r\n          \r\n          const res = await axios.post('/admin/students/add',fd)\r\n          if(res.data.success === 0)\r\n          throw res.data\r\n          dispatch({type: ADD_STUDENT_SUCCESS, isLoading: false, payload: res.data.student_details})\r\n          resolve({message: res.data.message})\r\n          \r\n        }catch(error){\r\n          dispatch({type: ADD_STUDENT_FAILED, isLoading: false})\r\n          reject({message: error.message})\r\n        }\r\n      }\r\n\r\n      fetch()\r\n\r\n    })\r\n  }\r\n}\r\n\r\nconst loadGroups = (id) => {\r\n  return async (dispatch) => {\r\n    dispatch({type: GROUP_LOAD_REQUEST, isLoading: true,});\r\n    try {\r\n      const res = await axios(\r\n        `http://foliox.deepinferx.in/web/api/admin/students/groups/get?admin=${id}`\r\n      );\r\n      const {\r\n        data: { groups },\r\n      } = res;\r\n      dispatch({ type: GROUP_LOAD_SUCCESS, payload: groups, isLoading: false,});\r\n    } catch (error) {\r\n      dispatch({ type: GROUP_LOAD_FAILED, isLoading: false,});\r\n      dispatch(notificationError(error.message));\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\nconst deleteGroup = (group_id, admin_id) => {\r\n  console.log(group_id, admin_id)\r\n  return async (dispatch) => {\r\n    dispatch({type: GROUP_DELETE_REQUEST, isLoading: true});\r\n\r\n    try {\r\n      const fd = new FormData();\r\n      fd.append('admin', admin_id)\r\n      fd.append('group', group_id)\r\n      const res = await axios.post(\"/admin/students/groups/delete\",\r\n        fd\r\n      );\r\n      if (res.data.success === 0) {\r\n        throw res.data;\r\n      }\r\n      dispatch({type: GROUP_DELETE_SUCCESS, isLoading: false, payload: group_id});\r\n      dispatch(notificationSuccess(res.data.message));\r\n    } catch (error) {\r\n      dispatch({type: GROUP_DELETE_FAILED, isLoading: false});\r\n      dispatch(notificationError(error.message));\r\n    }\r\n  };\r\n};\r\n\r\nconst deleteStudent = (student, admin_id) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: DELETE_STUDENT_REQUEST,\r\n      isLoading: true,\r\n    });\r\n    try {\r\n      const fd = new FormData();\r\n      fd.append('admin_id', admin_id)\r\n      fd.append('student_id', student.id);\r\n      const res = await axios.post(\"/admin/students/delete\", fd);\r\n      if (res.data.success === 0) {\r\n        throw { message: res.data.message };\r\n      }\r\n      dispatch({ type: DELETE_STUDENT_SUCCESS,payload: student, isLoading: false });\r\n      dispatch(notificationSuccess(res.data.message));\r\n    } catch (error) {\r\n      dispatch({\r\n        type: DELETE_STUDENT_FAILED,\r\n        isLoading: false,\r\n      });\r\n      dispatch(notificationError(error.message));\r\n    }\r\n  };\r\n};\r\n\r\nconst updateStudent = (student, admin_id) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: UPDATE_STUDENT_REQUEST,\r\n      isLoading: true,\r\n    });\r\n\r\n    try {\r\n      const fd = new FormData();\r\n      fd.append('admin_id', admin_id);\r\n      fd.append('student_id', student.id);\r\n      fd.append('name', student.name);\r\n      fd.append('email', student.email);\r\n      fd.append('mobile', student.mobile);\r\n      fd.append('pass', student.password);\r\n      \r\n      const res = await axios.post(\"/admin/students/update\", fd, {\r\n        headers: {\r\n          'Content-type':'multipart/form-data'\r\n        }\r\n      });\r\n      if (res.data.success === 0) throw { message: res.data.message };\r\n      dispatch({ type: UPDATE_STUDENT_SUCCESS, payload: student, isLoading: false });\r\n      dispatch(notificationSuccess(res.data.message));\r\n    } catch (error) {\r\n      dispatch({ type: UPDATE_STUDENT_FAILED, isLoading: false });\r\n      dispatch(notificationError(error.message));\r\n    }\r\n  };\r\n};\r\n\r\n//reducer\r\n\r\nconst groupReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case GROUP_LOAD_SUCCESS:\r\n      return {\r\n        ...state,\r\n        groups: action.payload,\r\n      }\r\n\r\n    case DELETE_STUDENT_SUCCESS: \r\n      {\r\n        const deletedStudent = action.payload\r\n        const group_id = deletedStudent.group_id\r\n        const student_id = deletedStudent.id\r\n        const studentGroup = state.groups.filter(group=>group.id === group_id)[0]  \r\n        const remainingGroup = state.groups.filter(group => group.id !== group_id)\r\n        return {\r\n          ...state,\r\n          groups: [...remainingGroup, {\r\n            ...studentGroup,\r\n            students: [...studentGroup.students.filter(student => student.id !== student_id)]\r\n          }]\r\n        };\r\n      }\r\n      \r\n\r\n    case UPDATE_STUDENT_SUCCESS:\r\n      {\r\n        const updatedStudent = action.payload\r\n        const group_id = updatedStudent.group_id\r\n        const student_id = updatedStudent.id\r\n        const studentGroup = state.groups.filter(group=>group.id === group_id)[0]\r\n        const remainingGroup = state.groups.filter(group => group.id !== group_id)\r\n        return {\r\n            ...state,\r\n            groups: [...remainingGroup,{\r\n              ...studentGroup,\r\n              students: [...studentGroup.students.filter(student => student.id !== student_id), {...updatedStudent}]\r\n            }]\r\n          }\r\n      } \r\n\r\n\r\n    case GROUP_DELETE_SUCCESS: \r\n    {\r\n      const group_id = action.payload\r\n      return {\r\n        ...state,\r\n        groups: [...state.groups.filter(group => group.id != group_id)]\r\n      }\r\n    }\r\n      \r\n    case ADD_STUDENT_SUCCESS:\r\n    {\r\n      const newStudent = action.payload\r\n      const group_id = newStudent.group_id\r\n      const remainingGroup = state.groups.filter(group=>group.id !== group_id)\r\n      const newStudentGroup = state.groups.filter(group => group.id === group_id)[0]\r\n      return {\r\n        ...state,\r\n        groups: [...remainingGroup, {\r\n          ...newStudentGroup,\r\n          students: [...newStudentGroup.students, newStudent]\r\n        }]\r\n      }\r\n    }\r\n\r\n    case ADD_GROUP_SUCCESS: \r\n    {\r\n      const group = action.payload\r\n      return {\r\n        ...state,\r\n        groups: [...state.group, group]\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//export\r\n\r\nexport default groupReducer;\r\nexport { loadGroups, deleteGroup, deleteStudent, updateStudent, addStudent, addGroup };\r\n","C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\isLoading\\index.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\NavBar\\index.js",["175","176","177","178"],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\CustomButton\\CustomButton.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Card\\Card.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\CustomTypography\\Typography.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\CustomInput\\CustomInput.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Select\\Select.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\assets\\style\\pages\\AdminRegister\\RegistrationOverlay.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\assets\\style\\pages\\AdminRegister\\AdminRegister.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Modal\\index.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\NavBar\\NavItem.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\notification\\index.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Notification\\Notification.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\message\\index.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\store\\modal\\index.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Modal\\ModalRoot.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\components\\Modal\\AddStudentModal.js",[],"C:\\Users\\Adil\\Desktop\\FolioX-Frontend\\src\\pages\\Admin\\Dashboard\\view\\AddGroup.js",["179","180"],{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","severity":1,"message":"186","line":63,"column":7,"nodeType":"187","messageId":"188","endLine":63,"endColumn":15},{"ruleId":"189","severity":1,"message":"190","line":101,"column":26,"nodeType":"191","messageId":"192","endLine":101,"endColumn":33},{"ruleId":"193","severity":1,"message":"194","line":55,"column":6,"nodeType":"195","endLine":55,"endColumn":8,"suggestions":"196"},{"ruleId":"197","severity":1,"message":"198","line":75,"column":5,"nodeType":"199","messageId":"200","endLine":75,"endColumn":20},{"ruleId":"201","severity":1,"message":"202","line":188,"column":35,"nodeType":"203","messageId":"204","endLine":188,"endColumn":42},{"ruleId":"189","severity":1,"message":"205","line":1,"column":28,"nodeType":"191","messageId":"192","endLine":1,"endColumn":36},{"ruleId":"189","severity":1,"message":"206","line":1,"column":38,"nodeType":"191","messageId":"192","endLine":1,"endColumn":48},{"ruleId":"197","severity":1,"message":"207","line":30,"column":5,"nodeType":"199","messageId":"200","endLine":30,"endColumn":13},{"ruleId":"193","severity":1,"message":"208","line":48,"column":6,"nodeType":"195","endLine":48,"endColumn":8,"suggestions":"209"},{"ruleId":"189","severity":1,"message":"206","line":1,"column":17,"nodeType":"191","messageId":"192","endLine":1,"endColumn":27},{"ruleId":"189","severity":1,"message":"210","line":1,"column":29,"nodeType":"191","messageId":"192","endLine":1,"endColumn":38},{"ruleId":"189","severity":1,"message":"211","line":2,"column":10,"nodeType":"191","messageId":"192","endLine":2,"endColumn":27},{"ruleId":"189","severity":1,"message":"212","line":2,"column":46,"nodeType":"191","messageId":"192","endLine":2,"endColumn":65},{"ruleId":"213","severity":1,"message":"214","line":40,"column":9,"nodeType":"215","messageId":"216","endLine":40,"endColumn":52},{"ruleId":"189","severity":1,"message":"212","line":2,"column":28,"nodeType":"191","messageId":"192","endLine":2,"endColumn":47},{"ruleId":"181","severity":1,"message":"217","line":60,"column":7,"nodeType":"191","messageId":"218","endLine":60,"endColumn":12},{"ruleId":"213","severity":1,"message":"214","line":145,"column":9,"nodeType":"215","messageId":"216","endLine":145,"endColumn":45},{"ruleId":"213","severity":1,"message":"214","line":180,"column":35,"nodeType":"215","messageId":"216","endLine":180,"endColumn":71},{"ruleId":"219","severity":1,"message":"220","line":239,"column":59,"nodeType":"221","messageId":"200","endLine":239,"endColumn":61},{"ruleId":"189","severity":1,"message":"210","line":1,"column":17,"nodeType":"191","messageId":"192","endLine":1,"endColumn":26},{"ruleId":"189","severity":1,"message":"206","line":1,"column":28,"nodeType":"191","messageId":"192","endLine":1,"endColumn":38},{"ruleId":"189","severity":1,"message":"222","line":2,"column":30,"nodeType":"191","messageId":"192","endLine":2,"endColumn":38},{"ruleId":"189","severity":1,"message":"223","line":2,"column":40,"nodeType":"191","messageId":"192","endLine":2,"endColumn":51},{"ruleId":"189","severity":1,"message":"224","line":4,"column":16,"nodeType":"191","messageId":"192","endLine":4,"endColumn":25},{"ruleId":"225","severity":1,"message":"226","line":98,"column":13,"nodeType":"227","endLine":98,"endColumn":50},"no-native-reassign",["228"],"no-negated-in-lhs",["229"],"no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","no-unused-vars","'message' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["230"],"no-dupe-keys","Duplicate key 'backgroundColor'.","ObjectExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'useState' is defined but never used.","'useContext' is defined but never used.","Duplicate key 'overflow'.","React Hook useEffect has missing dependencies: 'admin_id' and 'dispatch'. Either include them or remove the dependency array.",["231"],"'useEffect' is defined but never used.","'notificationClear' is defined but never used.","'notificationSuccess' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","Read-only global 'fetch' should not be modified.","nativeReassign","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'Navigate' is defined but never used.","'useLocation' is defined but never used.","'TextField' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},"Update the dependencies array to be: [dispatch]",{"range":"236","text":"237"},"Update the dependencies array to be: [admin_id, dispatch]",{"range":"238","text":"239"},[1607,1609],"[dispatch]",[1230,1232],"[admin_id, dispatch]"]